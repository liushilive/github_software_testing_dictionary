{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "软件测试词典测试是评估系统或其组件的过程，旨在发现它是否满足指定的要求。测试正在执行系统，以便根据实际需求或要求识别任何间隙，错误或缺少需求。1.目标读者这本词典旨在将几乎所有与软件测试相关的术语放在一个地方，并用合适的例子解释它们。此词典的目标读者是软件测试专家，软件质量专家和软件开发人员。2.先决条件在继续本词典中给出的术语之前，你应该对软件开发生命周期（SDLC）有基本的了解。还需要对软件编程有基本的了解。3.更新如有词汇异常，或需要补充词汇，请邮件联系：liushilive@outlook.com"}, "md/acceptance_testing.html": {"url": "md/acceptance_testing.html", "title": "Acceptance Testing", "keywords": "", "body": "验收测试验收测试，执行测试技术以确定软件系统是否符合要求规范。此测试的主要目的是评估系统是否符合业务要求，并验证其是否符合向最终用户交付的必要条件。有各种形式的验收测试：用户验收测试业务验收测试Alpha测试Beta测试1.验收测试-在SDLC中下图说明了验收测试在软件开发生命周期中的适用性。验收测试用例是根据测试数据或使用验收测试脚本执行的，然后将结果与预期测试结果进行比较。2.验收标准验收标准是基于以下属性定义的功能正确性和完整性数据的完整性数据转换可用性性能合时机密性和可用性可安装性和可升级性可扩展性文档3.验收测试计划-属性验收测试活动分阶段进行。首先，执行基本测试，如果测试结果令人满意，则执行更复杂的场景。验收测试计划具有以下属性：介绍验收测试类别运营环境测试用例ID测试题目测试目标测试程序测试时间表资源验收测试活动旨在得出以下结论之一：接受系统交付在请求的修改完成后接受系统不要接受系统4.验收测试报告-属性验收测试报告具有以下属性：报告标识符结果摘要变化建议待办事项清单摘要批准决定"}, "md/accessibility_testing.html": {"url": "md/accessibility_testing.html", "title": "Accessibility Testing", "keywords": "", "body": "辅助功能测试可访问性测试是可用性测试的一个子集，其中所考虑的用户是具有所有能力和残疾的人。此测试的重要性在于验证可用性和可访问性。无障碍设施旨在满足不同能力的人，例如：视力障碍身体损伤听觉受损认知障碍学习障碍一个好的Web应用程序应该迎合所有人群，而不仅限于残疾人。这些包括：通信基础设施差的用户老年人和新用户，他们通常是计算机文盲使用旧系统的用户（不能运行最新软件）正在使用非标准设备的用户具有受限访问权限的用户1.如何执行辅助功能测试Web可访问性倡议（WAI）描述了网站初步和一致性审查的策略。Web可访问性计划（WAI）包括一系列软件工具，可帮助进行一致性评估。这些工具的范围从色盲等特定问题到执行自动化蜘蛛工具的工具。2.Web辅助功能测试工具产品供应商网址AccVerifyHiSoftwarehttp://www.hisoftware.comBobbyWatchfirehttp://www.watchfire.comWebXMWatchfirehttp://www.watchfire.comRampAscendDequehttp://www.deque.comInFocusSSBTechnologieshttp://www.ssbtechnologies.com3.自动化工具在验收测试中的作用上述自动可访问性测试工具非常擅长识别需要手动检查可访问性的页面和代码行。检查网站代码的语法搜索人类列出的已知模式识别包含可能导致问题的元素的页面确定一些实际的可访问性问题找出一些潜在的问题对自动化可访问性测试工具的结果的解释需要在可访问性技术方面的经验以及对技术和可用性问题的理解。"}, "md/active_testing.html": {"url": "md/active_testing.html", "title": "Active Testing", "keywords": "", "body": "主动测试主动测试，一种测试技术，用户在其中引入测试数据并分析结果。在主动测试期间，测试人员构建被测软件的心智模型，随着你与软件的交互继续进行，该模型将继续增长和完善。1.我们如何进行主动测试在对被测应用程序执行的每个操作结束时，我们需要检查模型/应用程序是否满足客户的需求。如果没有，则需要调整应用程序，或者我们在应用程序中遇到问题。我们不断参与测试过程，帮助我们提出新的想法、测试用例、测试数据以实现。与此同时，我们需要记下我们可能希望稍后讨论的事情，或者我们跟进相关团队，最终找到并查明软件中的问题。因此，任何受测试的应用程序都需要主动测试，其中涉及发现缺陷的测试人员。"}, "md/actual_outcome.html": {"url": "md/actual_outcome.html", "title": "Actual Outcome", "keywords": "", "body": "实际结果实际结果也称为实际结果，测试者在执行测试后得到实际结果。在测试执行阶段，始终记录实际结果以及测试用例。在进行测试后，将实际结果与预期结果进行比较，并记录偏差。如果有偏差，则称为缺陷。简而言之，在获得实际结果后，我们可以标记方案是通过还是失败。在开发测试用例时，我们通常会有以下字段：测试场景测试步骤参数预期结果实际结果1.例让我们说，我们需要检查一个最多可接受10个字符的输入字段。在为上述场景开发测试用例时，测试用例按以下方式记录。在下面的示例中，第一种情况是通过方案，而第二种情况是FAIL。脚本测试步骤预期结果实际结果验证最多可接受10个字符的输入字段登录应用程序并输入10个字符应用程序应该能够接受所有10个字符。应用程序接受所有10个字符验证最多可接受11个字符的输入字段登录应用程序并输入11个字符应用程序不应接受所有11个字符。应用程序接受所有10个字符如果预期结果与实际结果不匹配，那么我们记录缺陷。缺陷经历了缺陷生命周期，测试人员在修复后解决了相同问题。"}, "md/adhoc_testing.html": {"url": "md/adhoc_testing.html", "title": "Adhoc Testing", "keywords": "", "body": "临时测试如果在没有适当规划和文档的情况下进行软件测试，则称其为AdhocTesting。除非我们发现缺陷，否则这种测试只执行一次。在对应用程序进行正式测试之后完成临时测试。Adhoc方法是最不正式的测试类型，因为它不是结构化方法。因此，使用此方法发现的缺陷很难复制，因为没有针对这些方案的测试用例。在不遵循规范/要求的情况下，随着测试人员对应用程序和测试人员测试的知识进行测试。因此，Adhoc测试的成功取决于执行测试的测试人员的能力。测试人员必须在没有任何适当规划和文档的情况下发现缺陷，完全基于测试人员的直觉。1.何时执行临时测试当有限时间进行详尽的测试并且通常在正式测试执行后执行时，可以执行临时测试。只有当测试人员对被测系统有深入的了解时，临时测试才会有效。特别测试形式：好友测试：两个好友，一个来自开发团队，一个来自测试团队，共同致力于识别同一模块中的缺陷。伙伴测试有助于测试人员开发更好的测试用例，而开发团队也可以尽早进行设计更改。这种测试通常在完成单元测试后发生。配对测试：为两个测试人员分配相同的模块，他们分享想法并在同一系统上工作以发现缺陷。一名测试人员执行测试，而另一名测试人员记录他们的调查结果。猴子测试：测试是在没有任何测试用例的情况下随机进行的，以便打破系统。2.各种使Adhoc测试更有效的方法准备：通过获取类似应用程序的缺陷细节，在应用程序中发现缺陷的可能性更大。创建一个粗略的想法：通过创建一个粗略的想法，测试人员将采用一种集中的方法。不需要将详细计划记录为测试内容和测试方法。划分和规则：通过逐个部分地测试应用程序，我们将更好地关注并更好地理解问题（如果有的话）。针对关键功能：测试人员应在设计测试用例时针对那些未涵盖的区域。使用工具：通过使用分析器，调试器甚至任务监视器，也可以将缺陷带入石灰灯。因此，熟练使用这些工具可以发现几个缺陷。记录结果：虽然测试是随机进行的，但如果时间允许，最好记录测试，并记下偏差（如果有的话）。如果发现缺陷，则会创建相应的测试用例，以便测试人员重新测试该方案。"}, "md/age_testing.html": {"url": "md/age_testing.html", "title": "Age Testing", "keywords": "", "body": "年龄测试它是一种测试技术，用于评估系统未来的执行能力，通常由测试团队执行。随着系统变老，性能可能下降的程度是在AgeTesting中测量的。让我们也理解缺陷年龄的概念。它是根据两个参数来衡量的：PhasesTime1.缺陷年龄-Phases阶段缺陷年龄定义为缺陷注入阶段和缺陷检测阶段之间的差异。1.1.参数1.“缺陷注入阶段”是引入缺陷时软件开发生命周期的阶段。1.“缺陷检测阶段”是指定缺陷时软件开发生命周期的阶段。1.2.计算公式阶段的缺陷年龄=缺陷检测阶段-缺陷注入阶段1.3.例思考一下，我们采用的SDLC方法有以下几个阶段：需求开发设计编码单元测试集成测试系统测试验收测试如果在单元测试（4）中发现缺陷并且缺陷在开发的设计阶段（2）中引入，则缺陷年龄为（4）-（2）=2。2.缺陷年龄-Time缺陷年龄定义为缺陷检测日期与当前日期之间的时间差，前提是缺陷仍被认为是开放的。2.1.参数缺陷处于“打开”和“已分配”状态，而不仅仅处于“新”状态。不考虑因“不可复制”或“重复”而处于“封闭”状态的缺陷。从缺陷开放日期和当前日期计算天数或小时数的差异。2.2.计算公式缺陷年龄=缺陷修复日期（OR）当前日期-缺陷检测日期2.3.例如果在05/05/201311:30:00AM检测到缺陷并在2013年5月23日下午12:00:00关闭，则缺陷年龄将按如下方式计算。缺陷年龄（天）=05/05/201311:30:00AM-23/05/201312:00:00PM缺陷年龄（天）=19days3.结果为了评估每个阶段和任何审查/测试活动的有效性，缺陷年龄越小，效果越好。"}, "md/agile_testing.html": {"url": "md/agile_testing.html", "title": "Agile Testing", "keywords": "", "body": "敏捷测试遵循敏捷软件开发原则的软件测试实践称为敏捷测试。敏捷是一种迭代开发方法，需求通过客户和自组织团队之间的协作发展，敏捷使开发与客户需求保持一致。1.敏捷测试的优点敏捷测试可节省时间和金钱少文档来自最终用户的定期反馈每日会议有助于提前确定问题2.敏捷测试原理测试不是一个阶段：敏捷团队持续测试，持续测试是确保持续进步的唯一方法。测试向前推进项目：当遵循传统方法时，测试被视为质量门，但敏捷测试持续提供反馈，产品满足业务需求。每个人都在测试：在传统的SDLC中，只有测试团队在敏捷时进行测试，包括开发人员和BA测试应用程序。缩短反馈响应时间：在传统的SDLC中，仅在验收测试期间，业务团队将了解产品开发，而在每次迭代的敏捷中，他们参与其中，持续的反馈缩短了反馈响应的时间和成本。修理也少。清洁代码：引发的缺陷在同一次迭代中得到修复，从而保持代码清洁。减少测试文档：敏捷测试人员使用可重复使用的核对表，而不是冗长的文档，而是关注测试的本质而不是偶然的细节。测试驱动：在传统方法中，测试在实施后执行，而在敏捷测试中，测试在实施时完成。3.敏捷测试的最佳实践自动化单元测试测试驱动开发自动回归测试探索性测试"}, "md/all_pairs_testing.html": {"url": "md/all_pairs_testing.html", "title": "All Pair Testing", "keywords": "", "body": "全配对测试全配对测试(All-pairs)也称为配对组合测试(pair-wisetesting)，是一种使用组合方法测试软件的测试方法。这是一种测试所涉及参数的所有可能离散组合的方法。假设我们有一个要测试的软件，每个输入字段有10个输入字段和10个可能的设置。然后，有\\(10^{10}\\)个可能的输入要测试。在这种情况下，即使我们希望测试所有组合，也不可能进行详尽的测试。让我们通过举例来理解全对测试的概念。1.例一个带有10个元素的简单列表框的应用程序（比如说0,1,2,3,4,5,6,7,8,9）以及一个复选框，单选按钮，文本框和OK按钮。“文本”框的约束是它只能接受介于1和100之间的值。以下是每个GUI对象可以采用的值：列表框-0,1,2,3,4,5,6,7,8,9复选框-已选中或未选中单选按钮-开或关文本框-1到100之间的任何值计算应用程序的详尽组合。ListBox=10CheckBox=2RadioButton=2TextBox=100使用笛卡尔方法的测试用例总数：1022*100=4000测试用例（包括否定用例）总数为&gt;4000现在，我们的想法是降低测试用例的数量。我们将首先尝试使用传统的软件测试技术找出用例数量。我们可以将列表框值视为0，将其他值视为0既不是正数也不是负数。单选按钮和复选框值不能减少。所以它们中的每一个都有2种组合（ON或OFF）。文本框值可以缩减为三个输入（有效整数，无效整数，Alpha特殊字符）。现在，我们将使用软件测试技术计算用例数量为2*2*2*3=24（包括否定用例）。现在，我们仍然可以将组合进一步减少为全对技术。步骤1：对值进行排序，使得具有最多数值的值是第一个，最小值作为最后一个变量。第2步：现在，开始逐列填充表。列表框可以取2个值。第3步：正在讨论的下一栏将是复选框。同样，复选框可以取2个值。第4步：现在，我们需要确保覆盖列表框和复选框之间的所有组合。第5步：现在，我们将使用相同的策略来检查单选按钮。它可能需要2个值。步骤6：验证是否涵盖了所有配对值，如下表所示。文本框列表框复选框单选按钮有效整数0选中开有效整数其他取消选中关无效整数0选中开无效整数其他取消选中关特殊字符0选中开特殊字符其他取消选中关2.配对测试的结果彻底组合导致&gt;4000个测试用例。传统的软件测试技术导致24个测试用例。配对软件测试技术仅产生6个测试用例。"}, "md/alpha_testing.html": {"url": "md/alpha_testing.html", "title": "Alpha Testing", "keywords": "", "body": "Alpha测试在向外部客户发布之前，内部团队在开发人员的网站上进行Alpha测试。在没有开发团队参与的情况下执行此测试。1.Alpha测试-在SDLC中下图说明了Alpha测试在软件开发生命周期中的适用性。2.我们如何运行它在alpha测试的第一阶段，该软件由内部开发人员进行测试，其中的目标是快速捕获错误。在alpha测试的第二阶段，该软件被提供给软件QA团队进行额外测试。在进行beta测试之前，Alpha测试通常作为内部验收测试的一种形式进行商用现成软件（COTS）。"}, "md/api_testing.html": {"url": "md/api_testing.html", "title": "API Testing", "keywords": "", "body": "API测试API代表ApplicationProgrammingInterface，它指定一个组件应如何与另一个组件交互。它由一组用于构建软件应用程序的例程，协议和工具组成。1.什么是API测试API测试是针对系统执行的，该系统具有应该测试的API集合。在测试期间，将对以下事项进行测试。探索边界条件并确保测试工具以验证功能和暴露故障的方式改变API调用的参数。生成更多增值参数组合以验证具有两个或更多参数的调用。验证考虑外部环境条件（例如文件，外围设备等）的API的行为。验证API调用的顺序，并检查API是否从连续调用中产生有用的结果。2.在API上执行的常见测试基于输入条件的返回值-根据输入条件检查API的返回值。验证API是否不返回任何内容。验证API是否触发其他事件或调用其他API。应跟踪并验证事件输出。验证API是否正在更新任何数据结构。"}, "md/arc_testing.html": {"url": "md/arc_testing.html", "title": "Arc Testing", "keywords": "", "body": "电弧测试ArcTesting只不过是分支测试。分支是决策的结果。因此，分支覆盖率是分支结果的度量。确定方法中分支的数量很容易，因为分支的输出通常有两个结果（TrueofFalse）。分支测试的重点是在决策中执行每个条件，以便至少测试一次所有可能的结果。每个分支（决定）采取各自的方式，真实和错误。它有助于验证代码中的所有分支，确保没有分支导致应用程序的异常行为。有关分支覆盖的更多信息，请参阅分支测试章节。决策覆盖率=(执行的决策结果的数量/决策结果的总数)*100%"}, "md/anomaly.html": {"url": "md/anomaly.html", "title": "Anomaly", "keywords": "", "body": "异常在软件测试中，Anomaly指的是与预期结果不同的结果。此行为可能来自文档，也可能来自测试人员的概念和经验。Anomaly也可以引用可用性问题，因为测试软件可能按照规范运行，但它仍然可以提高可用性。有时，异常也可以称为缺陷/Bug。1.什么是异常报告典型异常报告中涉及以下参数：缺陷标识符缺陷摘要缺陷描述缺陷状况重现缺陷的步骤严重优先错误记录日期识别错误的区域开发人员/测试人员评论2.什么是数据流异常在执行盒测试或静态测试时，会识别数据流异常。数据流异常使用基于操作序列的两个字符表示。被定义-D被杀死-K被使用-U基于这3个动作序列有九种可能的组合，即dd，dk，du，kd，kk，ku，ud，uk，uu。下表清楚地显示了这些组合中的哪一种被接受以及哪一种被怀疑是异常。组合描述异常的可能性DD定义了两次数据对象无害但可疑DK定义了数据对象，但在不使用它的情况下将其终止糟糕的编程实践DU定义数据对象并使用它不是异常KD杀死了数据对象并重新定义不是异常KK杀死了数据对象并再次将其杀死糟糕的编程实践KU杀死数据对象然后使用缺陷UD使用数据对象并重新定义不是异常UK使用数据对象并杀死不是异常UU使用数据对象并再次使用它不是异常"}, "md/assertion_testing.html": {"url": "md/assertion_testing.html", "title": "Assertion Testing", "keywords": "", "body": "断言测试断言是程序中特定点的布尔表达式，除非程序中存在错误，否则它将为真。测试断言定义为表达式，它封装了一些关于被测目标的可测试逻辑。1.断言的好处断言的主要优点是识别程序中的缺陷。断言的用处包括：它用于检测可能未被注意到的细微错误。它用于在错误发生后立即检测到错误。声明有关保证为真的代码的效果。2.断言的局限性与任何其他代码一样，断言本身可能包含错误。它可能导致以下问题：未能报告存在的错误。在不存在时报告错误。可能导致其他副作用如果它包含错误并占用内存，则可以花时间执行。3.断言如何阻止测试如果断言由于一个或另一个原因而失败，则相同的后果可能是严重的。断言可能升级为绊脚石，可能导致一整天停止测试。我们希望测试的一些条件可能在概念上很简单，但在实践中很难检查。"}, "md/audit.html": {"url": "md/audit.html", "title": "Audit", "keywords": "", "body": "审计审计是指对软件产品或流程进行独立审查，以评估是否符合规范，标准，合同协议或其他标准。软件领域的审计术语可以涉及以下任何一项：软件质量保证软件，对软件进行质量审核软件许可审核，审核软件用户的许可证合规性物理配置审核（PCA）是验证配置项的产品基准的正式检查1.审计目标进行软件审计的目的是根据适用的标准，指南，计划和程序对软件产品和过程进行独立评估。2.正式审计的角色和责任经理经理决定需要审核的内容，并确保在项目计划中为所有必需的审核活动分配足够的时间。经理通常不参与实际的审核过程。主持人主持人，也称为主审阅者，审查文件集。主持人将做出是否发布更新文件的最终决定。作者作者是撰写者，负责开发待审阅的文件。作者还负责修复任何商定的缺陷。记录员记录员出席审查会议并记录会议期间发现的所有问题/缺陷。"}, "md/automated_software_testing.html": {"url": "md/automated_software_testing.html", "title": "Automated Software Testing", "keywords": "", "body": "自动化软件测试软件测试自动化使用专用工具来控制测试的执行，并将实际结果与预期结果进行比较。通常，回归测试（重复操作）是自动化的。测试工具不仅帮助我们执行回归测试，还帮助我们自动化数据设置生成，产品安装，GUI交互，缺陷记录等。1.工具选择标准对于自动化任何应用程序，应考虑以下参数。数据驱动功能调试和日志记录功能平台独立性可扩展性和可定制性版本控制友好支持无人值守的测试运行邮件通知2.框架类型通常，在自动化应用程序时采用4个测试自动化框架。数据驱动的自动化框架关键字驱动自动化框架模块化自动化框架混合自动化框架3.用于功能自动化的常用工具产品供应商网址QuickTestProfessionalHPhttp://www.hp.com/go/qtpRationalRobotIBMhttp://www-03.ibm.com/software/products/us/en/robot/CodedUIMicrosofthttp://msdn.microsoft.com/en-us/library/dd286726.aspxSeleniumOpenSourcehttp://docs.seleniumhq.org/AutoITOpenSourcehttp://www.autoitscript.com/site/4.用于非功能自动化的常用工具ProductVendorURLLoadRunnerHPhttp://www.hp.com/go/LoadRunnerJmeterApachehttp://jmeter.apache.org/BurpSuitePortSwiggerhttp://portswigger.net/burp/AcunetixAcunetixhttp://www.acunetix.com/"}, "md/backward_compatibility_testing.html": {"url": "md/backward_compatibility_testing.html", "title": "Backward Compatibility Testing", "keywords": "", "body": "向后兼容性测试使用一个版本的平台开发的应用程序/产品仍应在较新版本的平台中运行。确保新版本产品继续使用旧产品的测试称为向后兼容性测试。1.例用户使用Excel2000创建了一个非常复杂的Excel工作表来跟踪项目进度，资源和费用。然后用户将他的MSOffice升级到2010版本。在MSOffice2000上运行的功能仍然可以工作，这意味着使用旧版本创建的资产应继续工作。如果使用旧版本创建的资产由于任何原因不支持新版本，则应该向用户提供正确的迁移路径，以便它们可以从先前版本平滑迁移到当前版本。"}, "md/baseline_artifacts.html": {"url": "md/baseline_artifacts.html", "title": "Baseline Artifacts", "keywords": "", "body": "BaseliningArtefacts管理硬件，软件，固件或文档更改的过程称为配置管理。基线是在配置项的修订历史中标识重要状态。1.基线类型功能基准分配的基线发展基线产品基准将所有测试工件基线化是配置管理过程的一部分。在软件测试生命周期中，以下项目是基线的：测试计划文件测试策略文档测试用例文档"}, "md/basis_path_testing.html": {"url": "md/basis_path_testing.html", "title": "Basis Path Testing", "keywords": "", "body": "基础路径测试基础路径测试，结构化测试或白盒测试技术，用于设计测试用例，旨在至少检查一次所有可能的执行路径。为所有可能的路径创建和执行测试会产生100%的语句覆盖率和100%的分支覆盖率。1.例Functionfn_delete_element(intvalue,intarray_size,intarray[]){1inti;location=array_size+1;2fori=1toarray_size3if(array[i]==value)4location=i;endif;endfor;5fori=locationtoarray_size6array[i]=array[i+1];endfor;7array_size--;}2.计算独立路径的步骤绘制正在考虑的功能/程序的流程图，如下所示：确定独立路径。Path1:1-2-5-7Path2:1-2-5-6-7Path3:1-2-3-2-5-6-7Path4:1-2-3-4-2-5-6-7"}, "md/basis_test_set.html": {"url": "md/basis_test_set.html", "title": "Basis Test Set", "keywords": "", "body": "基础测试集基础测试集是从组件的内部结构派生的一组测试，以实现特定标准的100%覆盖。1.技巧通常参与单元测试的开发人员开发用于测试内部结构的测试集。以下是测试内部结构所采用的技术：声明范围分支机构路径覆盖范围2.什么时候执行每当代码准备好进行单元测试时，开发人员都会测试该功能。在对特定功能进行验证后，开发人员对诸如内存泄漏，语句测试和路径测试等循环漏洞执行白​​盒测试，以确保测试正在编写的代码的每一行。"}, "md/bebugging.html": {"url": "md/bebugging.html", "title": "Bebugging", "keywords": "", "body": "BebuggingBebugging是为了监控检测和移除速率而故意向应用程序添加已知缺陷的过程。该过程也称为缺陷播种或故障注入或缺陷馈送。1.Bebugging的目的Bebugging是一种通过引入新的已知缺陷来提高产品质量的方法。它还用于确定测试集/测试套件的可靠性。它不是通过开发更多测试而是通过引入新缺陷来实现的。2.运行时注入运行时注入技术使用触发器使用多种方式动态地将故障注入软件系统，例如基于时间的触发器和基于中断的触发器。有各种工具和技术可用于手动或在运行时将故障插入系统。下面列出了一些商业故障注入工具：BeyondSecurityExhaustifHolodeckXceptionTheMuServiceAnalyzer"}, "md/behaviour_testing.html": {"url": "md/behaviour_testing.html", "title": "Behaviour Testing", "keywords": "", "body": "行为测试行为测试是对程序外部行为的测试，也称为黑盒测试。它通常是功能测试。1.黑盒测试中使用的技术等价类边界值分析域测试正交数组决策表状态模型探索性测试全对测试"}, "md/benchmark_testing.html": {"url": "md/benchmark_testing.html", "title": "Benchmark Testing", "keywords": "", "body": "基准测试基准测试是软件开发生命周期的一部分，涉及开发人员和数据库管理员（DBA），以确定当前性能并进行更改以改善其性能。编码应该非常有效地进行，同时微调数据库，以便用户可以体验性能改进。1.基准测试的组件软件中有各种组件需要进行基准测试才能实现性能变化。SQL查询SQL索引SQL程序SQL触发器表空间配置硬件配置应用代码网络防火墙2.如何进行基准测试基准测试应在相同条件下对相同的环境参数进行测试，以便我们可以比较结果。基准的特征包括：测试应该是可重复的每次测试都应在相同的环境条件下执行。除了测试目的所需的应用程序之外，不应存在处于活动状态的任何其他应用程序。软件和硬件组件应符合生产环境的规范。"}, "md/beta_testing.html": {"url": "md/beta_testing.html", "title": "Beta Testing", "keywords": "", "body": "Beta测试Beta测试也称为用户测试，最终用户在最终用户站点进行测试，以验证可用性，功能，兼容性和可靠性测试。Beta测试为软件开发生命周期增加了价值，因为它允许“真正的”客户有机会为产品的设计，功能和可用性提供输入。这些输入不仅对产品的成功至关重要，而且在有效管理收集的数据时对未来产品的投资也是如此。1.Beta测试-在SDLC中下图说明了Beta测试在软件开发生命周期中的适用性：2.Beta测试依赖项有许多因素取决于beta测试的成功与否：测试成本测试参与者数量运输测试持续时间人口统计覆盖率"}, "md/big_bang_testing.html": {"url": "md/big_bang_testing.html", "title": "Big-Bang Testing", "keywords": "", "body": "Big-Bang测试BigBang集成测试是一种集成测试策略，其中所有单元一次链接，从而形成一个完整的系统。采用这种类型的测试策略时，很难隔离发现的任何错误，因为没有注意验证各个单元之间的接口。1.BigBang集成-WorkFlow图BigBang测试由以下工作流程图表示：2.Big-Bang测试的缺点由于所有组件都集成在一个镜头中，因此在组件的接口处出现的缺陷在很晚阶段被识别。隔离发现的缺陷非常困难。很有可能遗漏一些可能在生产环境中出现的关键缺陷。很难涵盖集成测试的所有案例，甚至不会错过任何一个场景。"}, "md/binary_portability_testing.html": {"url": "md/binary_portability_testing.html", "title": "Binary Portability Testing", "keywords": "", "body": "二进制可移植性测试二进制可移植性是跨平台和环境测试可执行文件的可移植性，通常用于符合应用程序二进制接口（ABI）规范。应用程序二进制接口（或ABI）为已编译的应用程序定义了一个系统接口，并且对于不同类型的硬件体系结构也有所不同。由于二进制规范包括特定于计算机处理器体系结构的信息，因此不可能为所有可能的系统指定单个文档。因此，ABI是一系列规范，而不是单一规范。1.软件平台二进制可移植性测试应在不同类型的软件平台上进行。Windows(x86,X86-64)LinuxMacOSJavaSolarisAndroid"}, "md/black_box_testing.html": {"url": "md/black_box_testing.html", "title": "Black box Testing", "keywords": "", "body": "黑盒测试黑盒测试是一种软件测试方法，它根据规范检查应用程序的功能。它也被称为基于规格的测试。独立测试团队通常在软件测试生命周期中执行此类测试。这种测试方法可以应用于软件测试的每个级别，例如单元，集成，系统和验收测试。1.行为测试技术黑盒测试涉及不同的技术。等价类边界值分析域测试正交数组决策表状态模型探索性测试全对测试"}, "md/bottom_up_testing.html": {"url": "md/bottom_up_testing.html", "title": "Bottom Up Testing", "keywords": "", "body": "自下而上的测试较低层次的每个组件都单独进行测试，然后测试依赖于这些组件的组件。1.自下而上的整合自下而上方法的整合顺序如下：4,25,26,37,32,13,12.测试方法首先，使用驱动程序分别测试4、5、6、7。测试2，使它分别调用4和5。如果出现错误，我们知道问题出在其中一个模块中。测试1，使它调用3，如果出现错误，我们知道问题在3中，或者在1和3之间的接口中尽管顶级组件是最重要的，但最后使用此策略进行了测试。在自下而上的方法中，在测试组件4,5,6,7时，组件2和3被驱动程序替换。它们通常比根开始更复杂。"}, "md/boundary_testing.html": {"url": "md/boundary_testing.html", "title": "Boundary Testing", "keywords": "", "body": "边界测试边界值分析是一种黑盒子或基于规范的测试技术，其中使用边界值执行测试。1.例考试的通过边界为50%，良为75%，优为85%。此方案的有效边界值如下：49,50-通过74,75-良84,85-优边界值针对有效边界和无效边界进行验证。上例中的无效边界情况可以如下给出：0-对于下限边值101-对于上限边值"}, "md/branch_testing.html": {"url": "md/branch_testing.html", "title": "Branch Testing", "keywords": "", "body": "分支测试分支覆盖是一种测试方法，旨在确保每个决策点的每个可能分支至少执行一次，从而确保执行所有可到达的代码。也就是说，每一个分支都采用各种方式，无论是真是假。它有助于验证代码中的所有分支，确保没有分支导致应用程序的异常行为。1.公式分支测试=(测试的决策结果的数量/决策结果的总数)x100%2.例ReadAReadBIFA+B&gt;10THENPrint&quot;A+BisLarge&quot;ENDIFIfA&gt;5THENPrint&quot;ALarge&quot;ENDIF上述逻辑可以用流程图表示为：3.结果要计算分支的覆盖率，必须找出最小路径数，以确保所有的边都被覆盖。在这种情况下，没有一个单一的路径可以确保同时覆盖所有的边。目的是覆盖所有可能的正确/错误决策。1A-2C-3D-E-4G-5H1A-2B-E-4F因此分支覆盖率为2"}, "md/breadth_testing.html": {"url": "md/breadth_testing.html", "title": "Breadth Testing", "keywords": "", "body": "广度测试广度测试是一种测试套件，可以验证产品的全部功能，但不会详细测试产品功能。让我们从集成测试的角度来理解广度测试。自上而下的集成测试可以采用深度优先或广度优先的方法。在广度优先测试中，所有模块都在相同的控制级别上进行细化。实际上，使用广度优先测试和深度优先测试方法的组合。在开发的早期阶段，所有模块可能只是部分开发。这些模块以广度优先的方式进行测试，并且在一段时间内所有这些模块将通过连续的改进来交付，这将接近产品的全部功能。因此，模块的深度优先测试应该与广度优先测试同时进行。"}, "md/bug.html": {"url": "md/bug.html", "title": "BUG", "keywords": "", "body": "bug在软件测试中，当预期和实际行为不匹配时，需要引发事件。事件可能是一个Bug。程序员打算实现某种行为是程序员的错，但是由于编码中的错误实现，代码无法正确地符合这种行为。它也被称为缺陷。以下是Bug生命周期的工作流程：1.Bug的参数以下详细信息应该是Bug的一部分：发行日期，作者，批准和状态。事件的严重性和优先级。显示问题的相关测试用例预期和实际结果。识别测试项目和环境。有关重现步骤的事件描述事件的状况结论，建议和批准。"}, "md/build_validation.html": {"url": "md/build_validation.html", "title": "Build Validation", "keywords": "", "body": "构建验证构建验证测试或构建验证测试是在新构建上执行的一组测试，用于在构建发布给独立测试团队之前验证构建是否可测试。1.测试范围构建验证测试在完成测试运行之前启动，因为它可以让开发人员立即知道是否存在与构建相关联的showshopper缺陷，以便节省测试团队测试不稳定构建的工作量。构建验收测试通常是一组不完整的测试，用于测试应用程序/产品的主流功能。任何未通过构建验证测试的构建都将被拒绝，并且如果存在则继续在之前的构建上进行测试。"}, "md/business_process.html": {"url": "md/business_process.html", "title": "Business Process", "keywords": "", "body": "业务流程业务流程是为最终用户生成特定服务或产品的活动或任务的集合。它通常表示为指向ProcessMatrix的一系列活动的流程图。业务流程建模由流程所有者或产品所有者执行，以使测试团队能够高效地进行测试。它旨在通过优化产品或服务的相关活动的效率来提高业务绩效。1.业务流程生命周期业务流程生命周期有以下各个阶段：2.业务流程测试BPT它是一种用于自动和手动测试的工具，用于设计测试，维护测试和执行测试。可重复使用的测试通常由业务分析师设计，以提高测试效率。3.BPT的好处和特点允许非技术主题专业知识快速构建可重用的测试工作流程。它减少了测试维护所需的工作量。它将手动测试转换为手动测试组件。它提供了一个框架来构建用户验收测试以满足要求。"}, "md/capability_maturity_model.html": {"url": "md/capability_maturity_model.html", "title": "Capability Maturity Model", "keywords": "", "body": "能力成熟度模型软件工程协会（SEI）能力成熟度模型（CMM）规定了一系列不断增加的软件开发组织级别。级别越高，软件开发过程越好，因此达到每个级别是一个昂贵且耗时的过程。1.CMM级别第一级：初始软件过程的特点是不一致，有时甚至是混乱的。在危机期间放弃存在的定义过程和标准实践。组织的成功主要取决于个人的努力，才能和英雄。英雄最终转向其他组织，他们将丰富的知识或经验教训带到他们身边。第二级：可重复此级别的软件开发组织具有基本且一致的项目管理流程，可跟踪成本，进度和功能。该流程已经到位，可以重复早期在具有类似应用的项目上取得的成功。项目管理是二级组织的关键特征。第三级：定义管理和工程活动的软件过程记录，标准化，并集成到整个组织的标准软件过程中，整个组织的所有项目都使用经过批准的，定制的组织标准软件过程版本进行开发，测试和维护应用程序。第四级：管理管理可以使用精确的测量有效地控制软件开发工作。在此级别，组织为软件过程和软件维护设定了定量质量目标。在此成熟度级别，流程的性能使用统计和其他定量技术进行控制，并且在数量上是可预测的。第五级：优化该级别的关键特征是通过渐进式和创新性技术改进，不断改进过程性能。在此级别，流程的变化是改善流程绩效，同时保持统计概率，以实现既定的流程改进目标。"}, "md/capture_replay_tool.html": {"url": "md/capture_replay_tool.html", "title": "Capture/Replay Tool", "keywords": "", "body": "捕获/重放工具已经开发了GUI捕获和重放工具，用于针对图形用户界面测试应用程序。使用捕获和重放工具，测试人员可以运行应用程序并记录用户与应用程序之间的交互。脚本记录所有用户操作，包括鼠标移动，然后工具可以自动重放完全相同的交互式会话，无需人工干预。这支持图形用户界面的全自动回归测试。"}, "md/cause_effect_graph.html": {"url": "md/cause_effect_graph.html", "title": "Cause-Effect Graph", "keywords": "", "body": "因果图因果图是一种黑盒测试技术，以图形方式说明给定结果与影响结果的所有因素之间的关系。它也被称为Ishikawa图，因为它是由KaoruIshikawa发明的，因为它的外观也称为鱼骨图。1.什么情况使用因果图确定可能的根本原因，特定效果，问题或结果的原因。将系统之间的相互作用与影响特定过程或效果的因素联系起来。分析现有问题，以便最早采取纠正措施。2.好处它帮助我们使用结构化方法确定问题或质量的根本原因。它使用有序，易于阅读的格式来绘制因果关系。它表示过程中可能的变化原因。它标识应收集数据以供进一步研究的区域。它鼓励团队参与并利用团队对流程的了解。它通过帮助每个人更多地了解工作中的因素及其相关性来增加对过程的了解。3.绘制因果图的步骤确定并定义效果填写效果框并画出脊柱确定导致研究效果的主要原因。对于每个主要分支，确定可能是EFFECT原因的其他特定因素。对相对原因进行分类并提供详细的原因。"}, "md/code_coverage.html": {"url": "md/code_coverage.html", "title": "Code Coverage", "keywords": "", "body": "代码覆盖率代码覆盖率测试正在确定正在测试的代码量。它可以使用以下公式计算：代码覆盖率=(执行的代码行数)/(总代码行数)*100%1.以下是代码覆盖率分析的类型声明范围和阻止覆盖范围功能覆盖功能覆盖范围分行报道修改条件/决策覆盖范围"}, "md/code_freeze.html": {"url": "md/code_freeze.html", "title": "Code Freeze", "keywords": "", "body": "代码冻结代码冻结意味着代码被冻结，开发人员不会进行任何进一步的修改。代码冻结后，开发人员不应更改代码。只有在出现严重缺陷的情况下，开发人员才能在更改控制板批准后更改代码，并进行必要的更改以修复该关键缺陷。代码冻结只会在软件开发的最后阶段发生。提交编码冻结后，构建部署到生产环境。"}, "md/code_inspection.html": {"url": "md/code_inspection.html", "title": "Code Inspection", "keywords": "", "body": "代码检查1.什么是代码检查代码检查是最正式的审查类型，它是一种静态测试，以避免在后期出现缺陷。代码检查的主要目的是发现缺陷，如果有的话，还可以发现任何流程改进。检查报告列出了调查结果，其中包括可用于帮助改进流程以及纠正所审查文档中的缺陷的指标。会议前的准备工作至关重要，其中包括阅读任何源文件以确保一致性。检查通常由训练有素的主持人领导，主持人不是代码的作者。检查过程是基于规则和检查表的最正式的检查类型，并使用进入和退出标准。它通常涉及代码的同行检查，每个代码都有一组定义的角色。会议结束后，采用正式的后续流程确保及时完成纠正措施。2.代码检查适合哪些地方"}, "md/code_review.html": {"url": "md/code_review.html", "title": "Code Review", "keywords": "", "body": "代码审查代码审查是一项系统检查，可以查找和删除代码中的漏洞，如内存泄漏和缓冲区溢出。技术评审已有详细记录，并使用明确定义的缺陷检测流程，其中包括同行和技术专家。理想情况下，由训练有素的主持人领导，他不是作者。这种审查通常在没有管理层参与的情况下作为同行评审进行。审稿人为审查会议做准备，并准备一份审查报告，其中包含调查结果清单。技术评审可能非常非正式或非常正式，可以有许多目的，但不限于讨论，决策，替代方案评估，发现缺陷和解决技术问题。1.CodeReview适合哪些地方"}, "md/code_walkthrough.html": {"url": "md/code_walkthrough.html", "title": "Code Walkthrough", "keywords": "", "body": "代码走查代码走查是一种同行评审形式，其中程序员领导审核流程，其他团队成员提出问题并根据开发标准和其他问题发现可能的错误。会议通常由走查文件的作者领导，并由团队的其他成员参加。走查会议可以是正式的或非正式的。在走查会议之前，由审阅者准备，然后是走查报告，其中包含调查结果列表。不是作者的抄写员标记会议记录并记下所有缺陷/问题，以便可以追踪到结束。走查的主要目的是使学习有关正在走查的文档的内容，以帮助团队成员了解文档的内容，并找到缺陷。1.CodeWalkthrough适合哪些地方"}, "md/code_driven_testing.html": {"url": "md/code_driven_testing.html", "title": "Code Driven Testing", "keywords": "", "body": "代码驱动测试代码驱动的测试也称为测试驱动开发的第一步是添加一个测试，这足以使代码失败。接下来，我们通常会执行测试通常是一个完整的测试套件或一部分测试来加速测试，以确保新测试失败。然后，更新代码以使其通过新测试。然后，第四步是再次执行测试。如果它们失败，我们需要更新代码并重新测试。测试通过后，下一步是再次为下一个开发项目执行相同的过程。1.代码驱动测试WorkFlow"}, "md/code_free_testing.html": {"url": "md/code_free_testing.html", "title": "Code Free Testing", "keywords": "", "body": "无代码测试无代码测试，在不执行代码的情况下执行的测试技术。静态测试技术（如检查和静态分析）是无代码测试的一部分。审核通常用于查找和消除文档中的错误或含糊之处，例如需求，设计，测试用例等。静态分析开发人员编写的代码（通常通过工具）分析可能导致缺陷的结构缺陷。1.评论类型评论的类型可以通过一个简单的图表给出：2.静态分析-按工具以下是静态分析期间工具发现的缺陷类型：具有未定义值的变量模块和组件之间的接口不一致声明但从未使用过的变量无法访问的代码（或）死代码编程标准违规安全漏洞语法违规"}, "md/comparison_testing.html": {"url": "md/comparison_testing.html", "title": "Comparison Testing", "keywords": "", "body": "比较测试比较测试包括将文件，数据库的内容与实际结果进行比较。它们能够突出预期结果与实际结果之间的差异。比较测试工具通常具有允许忽略或屏蔽文件的指定部分的功能。这使得测试人员可以屏蔽屏幕或字段上的日期或时间戳，因为在执行比较时它总是与预期的不同。"}, "md/compatibility_testing.html": {"url": "md/compatibility_testing.html", "title": "Compatibility Testing", "keywords": "", "body": "兼容性测试兼容性测试是对应用程序进行的非功能性测试，用于评估应用程序在不同环境中的兼容性。它可以是两种类型-前向兼容性测试和后向兼容性测试。操作系统兼容性测试Linux，MacOS，Windows数据库兼容性测试OracleSQLServer浏览器兼容性测试IE，Chrome，Firefox其他系统软件Web服务器，网络/消息传递工具等"}, "md/compliance_testing.html": {"url": "md/compliance_testing.html", "title": "Compliance Testing", "keywords": "", "body": "依从性测试执行依从性测试以维护和验证软件生命周期内的合规状态。每个行业都有一个监管和合规委员会，以保护最终用户。对于航运和物流行业，外国资产和控制办公室（OFAC）已经为特别指定的国民制定了若干条例。在医疗保健领域，健康保险流通与责任法案（HIPAA）包括行政简化部分，该部分要求保护患者的信息资产。制药行业使用的软件，食品和药品管理局（FDA）颁布的立法就出现了。1.依从性测试清单必须保留了解依从性的知识渊博且经验丰富的专业人员。了解不合规的风险和影响记录流程并遵循它们执行内部审核并遵循行动计划来解决问题"}, "md/concurrency_testing.html": {"url": "md/concurrency_testing.html", "title": "Concurrency Testing", "keywords": "", "body": "并发测试并发测试也称为多用户测试，用于在多个用户登录应用程序时识别应用程序中的缺陷。它有助于识别和测量系统参数中的问题，例如响应时间，吞吐量，锁定/死锁或与并发相关的任何其他问题。例：Loadrunner是广泛使用的商业性能测试工具之一，用于此类测试。VuGen（虚拟用户生成器）用于添加多个并发用户，并注意到系统的性能。"}, "md/condition_coverage_testing.html": {"url": "md/condition_coverage_testing.html", "title": "Condition Coverage Testing", "keywords": "", "body": "条件覆盖测试条件覆盖率也称为谓词覆盖率，其中每个布尔表达式都已被评估为TRUE和FALSE。1.例if((A||B)&amp;&amp;C){&lt;&lt;FewStatements&gt;&gt;}else{&lt;&lt;FewStatements&gt;&gt;}2.结果为了确保上述示例的完整条件覆盖标准，A，B和C应至少对“真”和“假”评估一次。因此，在我们的示例中，以下3个测试足以进行100%条件覆盖测试。A=true|B=noteval|C=falseA=false|B=true|C=trueA=false|B=false|C=noteval"}, "md/configuration_testing.html": {"url": "md/configuration_testing.html", "title": "Configuration Testing", "keywords": "", "body": "配置测试配置测试是使用每种支持的软件和硬件配置测试系统的过程。执行区域允许重用已创建的测试，从而支持配置测试。1.使用各种配置执行测试操作系统配置WinXP，Win732位/64位，Win832位/64位...数据库配置Oracle，DB2，MySql，MSSQLServer，Sybase...浏览器配置IE8，IE9，FF16.0，Chrome..."}, "md/conformance_testing.html": {"url": "md/conformance_testing.html", "title": "Configuration Testing", "keywords": "", "body": "一致性测试一致性测试不仅仅是一项法规要求，用于验证产品是否符合为提高效率而开发的某些特定标准。它通常由外部组织执行，外部组织可能是一个外部管理机构，以确保系统符合要求。以下活动是一致性测试的一部分：使用经批准的测试方法进行测试强大的测试流程有效的问题解决"}, "md/context_driven_tesing.html": {"url": "md/context_driven_tesing.html", "title": "Context Driven Testing", "keywords": "", "body": "上下文驱动的测试上下文驱动的软件测试主张基于项目的上下文进行测试，而不是通过书籍方法测试或一些固定的最佳实践概念。上下文驱动测试的七个基本原则如下：任何实践的价值取决于其背景。在上下文中有良好的实践，但没有最佳实践。人们一起工作是任何项目背景中最重要的部分。随着时间的推移项目以往往无法预测的方式展开。该产品是一种解决方案。如果问题仍未解决，则产品不起作用。良好的软件测试是具有挑战性的智能过程只有通过在整个项目中合作运行的判断和技能，我们才能在正确的时间做正确的事情，以有效地测试我们的产品。"}, "md/control_flow_path.html": {"url": "md/control_flow_path.html", "title": "Control Flow Path", "keywords": "", "body": "控制流路径控制流路径是程序执行过程中可能遍历的所有路径的图形表示。大多数表示有两种类型的块。控制通过一个入口块进入流程图，所有控制流通过一个出口块离开。通过这种表示，我们还可以计算圈复杂度。它还使我们能够有效地验证可达性、与其他节点、边缘和循环的关系。"}, "md/conversion_testing.html": {"url": "md/conversion_testing.html", "title": "Conversion Testing", "keywords": "", "body": "转换测试转换测试是为了验证一种数据格式是否可以转换为另一种数据格式，以便被转换的数据格式可以被被测试的应用程序无缝地使用。任何类型的数据都可以从任何形式转换为另一种形式；但是，对于基于Web的应用程序，网页应该是HTML格式，应该遵循W3CHTML规范，以便浏览器可以正确地呈现页面。1.转换测试-示例编程语言转换数据库文件转换媒体转换（音频，视频，图像，文档）"}, "md/correctness.html": {"url": "md/correctness.html", "title": "Correctness", "keywords": "", "body": "正确性从软件工程角度来看，正确性可以定义为遵守规范，这些规范决定了用户如何与软件交互以及软件在正确使用时的行为方式。如果软件行为不正确，则可能需要相当长的时间才能完成任务，或者有时无法实现该任务。1.重要规则以下是有效编程的一些重要规则，它们是程序正确性理论的结果。完全定义问题。开发算法，然后开发程序逻辑。尽可能重复使用经过验证的模型。在设计阶段证明算法的正确性。开发人员应该注意程序的清晰度和简单性。一旦开发出程序，就立即验证程序的每个部分。"}, "md/coverage_items.html": {"url": "md/coverage_items.html", "title": "Coverage Items", "keywords": "", "body": "覆盖项执行白盒测试以测量代码覆盖率，并且在该过程期间覆盖的模块/代码被称为覆盖项。执行白盒测试后，将生成一个报告以分析覆盖项。功能覆盖范围电话覆盖范围课程覆盖范围线性代码序列和跳转（LCSAJ）覆盖范围数据流覆盖范围循环覆盖范围关系运营商覆盖范围"}, "md/cyclomatic_complexity.html": {"url": "md/cyclomatic_complexity.html", "title": "Cyclomatic Complexity", "keywords": "", "body": "圈复杂度圈复杂度是源代码复杂度测量，其与许多编码错误相关联。它是通过开发代码的控制流程图来计算的，该代码测量通过程序模块的线性无关路径的数量。降低程序的圈复杂度，降低修改和更容易理解的风险。它可以使用以下公式表示：圈复杂度=E-N+2*PE=流程图中的边数N=流程图中的节点数P=具有退出点的节点数1.示例IFA=10THENIFB&gt;CTHENA=BELSEA=CENDIFENDIFPrintAPrintBPrintC2.流图使用上面的控制流程图计算Cyclomatic复杂度，该控制流程图显示七个节点（形状）和八个边缘（线），因此圈复杂度为8-7+2=3"}, "md/data_and_database_integrity_testing.html": {"url": "md/data_and_database_integrity_testing.html", "title": "Data Integrity Testing", "keywords": "", "body": "数据完整性测试数据完整性对应于数据库中的数据质量以及用户检查数据质量，完整性和可靠性的级别。数据完整性测试验证数据库中的数据是否准确，并在给定的应用程序中按预期运行。1.数据完整性测试的特征数据完整性测试涉及：检查是否可以从数据库中检索空值或默认值。如果成功保存到数据库，则验证每个值。确保与旧硬件或旧版操作系统的数据兼容性。可以修改和删除验证数据表中的数据对所有数据文件运行数据测试，包括剪贴画，教程，模板等。"}, "md/data_driven_testing.html": {"url": "md/data_driven_testing.html", "title": "Data Driven Testing", "keywords": "", "body": "数据驱动测试数据驱动测试是创建测试脚本，其中测试数据和/或输出值从数据文件中读取，而不是每次测试运行时使用相同的硬编码值。这样，测试人员可以测试应用程序如何有效地处理各种输入。它可以是以下任何数据文件。数据池Excel文件ADO对象CSV文件ODBC源1.流程图通过下图可以最好地理解数据驱动测试："}, "md/data_flow_testing.html": {"url": "md/data_flow_testing.html", "title": "Data Flow Testing", "keywords": "", "body": "数据流测试数据流测试是基于通过程序的控制流选择路径的一系列测试策略，以便探索与变量或数据对象的状态相关的事件序列。数据流测试侧重于变量接收值的点和使用这些值的点。1.数据流测试的优点数据流测试有助于我们找出以下任何问题：声明但从未在程序中使用的变量。使用但从未声明的变量。在使用之前定义多次的变量。在使用变量之前释放变量。"}, "md/database_testing.html": {"url": "md/database_testing.html", "title": "Database Testing", "keywords": "", "body": "数据库测试数据库测试涉及Web或桌面应用程序从数据库中检索的值。用户界面中的数据应根据记录存储在数据库中进行匹配。1.数据库测试验证在数据库测试期间执行以下验证：检查数据映射。ACID（原子性，一致性，隔离性，耐久性）属性验证。数据的完整性业务规则一致性"}, "md/debugging.html": {"url": "md/debugging.html", "title": "Debugging", "keywords": "", "body": "调试它是在一个软件中发现和修复错误或缺陷数量的系统过程，以便软件按预期运行。特别是当各个子系统紧密耦合时，调试对于复杂系统来说更难，因为一个系统或接口中的更改可能导致错误出现在另一个系统或接口中。调试是一项开发人员活动，在测试开始提高系统质量之前，有效的调试非常重要。调试不会让系统完全满足其要求，但测试可以提供信心。"}, "md/decision_coverage_testing.html": {"url": "md/decision_coverage_testing.html", "title": "Decision Coverage Testing", "keywords": "", "body": "决策覆盖测试决策覆盖或分支覆盖是一种测试方法，旨在确保每个决策点的每个可能分支至少执行一次，从而确保执行所有可到达的代码。也就是说，每一个决定都采取各自的方式，无论是真是假。它有助于验证代码中的所有分支，确保没有分支导致应用程序的异常行为。1.例ReadAReadBIFA+B&gt;10THENPrint&quot;A+BisLarge&quot;ENDIFIfA&gt;5THENPrint&quot;ALarge&quot;ENDIF上述逻辑可以用流程图表示为：2.覆盖率要计算分支的覆盖率，必须找出最小路径数，以确保所有的边都被覆盖。在这种情况下，没有一个单一的路径可以确保同时覆盖所有的边。目的是覆盖所有可能的正确/错误决策。1A-2C-3D-E-4G-5H1A-2B-E-4F因此决策或分支覆盖率为2。"}, "md/defect.html": {"url": "md/defect.html", "title": "Defect", "keywords": "", "body": "缺陷当预期结果与实际结果不匹配时，会出现软件错误。它也可能是计算机程序中的错误，缺陷，故障或错误。大多数错误都是由开发人员，架构师所犯的错误和错误引起的。以下是防止程序员在开发过程中引入错误的方法：采用编程技术软件开发方法同行评审代码分析1.常见的缺陷类型以下是开发过程中常见的缺陷类型：算术缺陷逻辑缺陷语法缺陷多线程缺陷界面缺陷性能缺陷"}, "md/defect_logging_and_tracking.html": {"url": "md/defect_logging_and_tracking.html", "title": "Defect Logging and Tracking", "keywords": "", "body": "缺陷记录和跟踪缺陷记录，通过测试或记录客户反馈并制作修复缺陷或客户反馈的产品的新版本，在测试或产品中发现缺陷的过程。缺陷跟踪是软件工程中的一个重要过程，因为复杂和业务关键系统存在数百个缺陷。其中一个具有挑战性的因素是管理，评估和优先处理这些缺陷。缺陷数量在一段时间内成倍增加并有效地管理它们，缺陷跟踪系统用于使工作更容易。1.缺陷跟踪参数根据各种参数跟踪缺陷，例如：缺陷ID优先级别严重级别创建人创建日期分配给已解决的日期解决了状态"}, "md/defect_life_cycle.html": {"url": "md/defect_life_cycle.html", "title": "Defect Life Cycle", "keywords": "", "body": "缺陷生命周期缺陷生命周期，也称为Bug生命周期，是缺陷循环的过程，缺陷在其生命周期中经历。它因组织和组织而异，因为它受软件测试过程的控制，也取决于所使用的工具。1.缺陷生命周期-工作流程2.缺陷生命周期New提出但尚未验证的潜在缺陷。Assigned已分配给开发团队以解决该问题，但尚未解决。Active正在解决缺陷，调查正在进行中。Test缺陷已修复并准备好进行测试。Verified重新测试的缺陷和测试已通过QA验证。Closed在QA重新测试后可以关闭的缺陷的最终状态，或者如果缺陷重复或被视为非缺陷，则可以关闭缺陷的最终状态。Reopened当缺陷未修复时，QA重新打开/重新激活缺陷。Deferred当在该特定周期中无法解决缺陷时，将推迟到将来的版本中。Rejected由于以下3个原因中的任何一个，可以拒绝缺陷；重复缺陷，不是缺陷，不可重复。"}, "md/delta_release.html": {"url": "md/delta_release.html", "title": "Delta Release", "keywords": "", "body": "增量发布增量版本（也称为部分版本）是仅包含发布单元中自上次完全发布或增量发布以来已更改或新增的那些区域的版本。如果发布单元是完整程序，则增量发行版仅包含自上次完全发布程序以来已更改的模块。"}, "md/dependency_testing.html": {"url": "md/dependency_testing.html", "title": "Dependency Testing", "keywords": "", "body": "依赖性测试依赖性测试，一种测试技术，其中为现有软件预先检查应用程序的要求，初始状态以测试正确的功能。在测试新功能或现有功能时，还会测试应用程序的受影响区域。"}, "md/depth_testing.html": {"url": "md/depth_testing.html", "title": "Depth Testing", "keywords": "", "body": "深度测试深度测试是一种测试技术，其中详细测试了产品的功能。在集成阶段对每个功能进行详尽测试，并记录缺陷，捕获所有参数，功能和非功能。"}, "md/destructive_testing.html": {"url": "md/destructive_testing.html", "title": "Destructive Testing", "keywords": "", "body": "破坏性测试破坏性测试是一种测试技术，其中应用程序以不受控制的方式失败以测试应用程序的稳健性并且还找到故障点。破坏性测试在最严苛的操作条件下进行，并持续到应用程序中断。破坏性测试的主要目的不仅是确定在正常工作条件下可能不会出现的设计缺陷，还要确定产品的使用寿命。"}, "md/development_environment.html": {"url": "md/development_environment.html", "title": "Development Environment", "keywords": "", "body": "开发环境开发环境可帮助开发人员使用一组流程和编程工具开发应用程序或产品。开发环境为开发人员提供了开发过程的界面和方便的视图，包括编写代码，测试代码和打包构建以便可以部署它。"}, "md/documentation_testing.html": {"url": "md/documentation_testing.html", "title": "Documentation Testing", "keywords": "", "body": "文档测试文档测试涉及测试通常在软件测试之前或期间开发的文档工件。软件测试文档有助于估计所需的测试工作量，测试覆盖率，需求跟踪/跟踪等。本节包括与软件开发和测试相关的一些常用文档工件的描述，例如：测试计划要求测试用例可追溯性矩阵"}, "md/domain_testing.html": {"url": "md/domain_testing.html", "title": "Domain Testing", "keywords": "", "body": "域名测试域测试是一种软件测试技术，从几乎无限的测试用例组中选择少量测试用例。对于少数应用程序的测试，领域特定知识起着非常重要的作用。域测试是一种功能测试，通过提供有趣的输入并评估其输出来测试应用程序。1.域-等价类测试等价类在执行域测试时具有其自身的意义。等价类的不同方式是：直观的等价指定的等价主观对等基于风险的等价"}, "md/durability_testing.html": {"url": "md/durability_testing.html", "title": "Durability Testing", "keywords": "", "body": "耐久性测试耐久性测试是一种性能测试技术，用于确定系统在不同负载条件下的特性。此测试有助于我们确定在测试期间事务响应时间的稳定性。在测试耐久性时测量以下参数：内存泄漏评估I/O活动级别评估数据库资源消耗"}, "md/dynamic_testing.html": {"url": "md/dynamic_testing.html", "title": "Dynamic Testing", "keywords": "", "body": "动态测试动态测试是一种软件测试技术，使用它来分析代码的动态行为。对于执行动态，应编译和执行测试软件，并分析诸如内存使用，CPU使用，响应时间和软件整体性能等参数。动态测试涉及测试软件的输入值，并分析输出值。动态测试是验证和验证的验证部分。1.动态测试技术动态测试技术大致分为两类。他们是：功能测试非功能测试2.动态测试的级别有各种级别的动态测试技术。他们是：单元测试集成测试系统测试验收测试"}, "md/emulator.html": {"url": "md/emulator.html", "title": "Emulator", "keywords": "", "body": "模拟器模拟器是模拟另一计算机系统中的一个计算机系统的功能的硬件或软件。1.优点模拟器允许用户继续我们对已停产的控制台的工作。许多模拟器已经在GNU通用公共许可证下发布，允许进行大规模协作。尽管开发模拟器的原始成本，它可能被证明是更具成本效益的解决方案。"}, "md/end_to_end_testing.html": {"url": "md/end_to_end_testing.html", "title": "End-to-End Testing", "keywords": "", "body": "端到端测试端到端测试是一种用于测试应用程序从开始到结束的流程是否按预期运行的技术。执行端到端测试的目的是识别系统依赖性并确保在各种系统组件和系统之间保持数据完整性。测试整个应用程序的关键功能，例如与其他系统，接口，数据库，网络和其他应用程序进行通信。"}, "md/endurance_testing.html": {"url": "md/endurance_testing.html", "title": "Endurance Testing", "keywords": "", "body": "耐力测试耐久性测试也称为浸泡测试，用于确定被测应用是否能够承受连续负载。耐久性测试，非功能性测试涉及检查系统是否能够承受较长时间的巨大负载，从而测量系统的反应参数。1.发现的问题-耐力测试严重的内存泄漏最终会导致应用程序或操作系统崩溃如果未能关闭系统各层之间的连接，可能会使系统的某些或所有模块停顿。在某些情况下无法关闭数据库连接可能会导致系统崩溃。随着应用程序因长时间测试而变得效率降低，系统响应时间逐渐降低。"}, "md/entry_criteria.html": {"url": "md/entry_criteria.html", "title": "Entry Criteria", "keywords": "", "body": "进入标准进入标准用于确定何时应开始给定的测试活动。它还包括测试级别的开始，测试设计或测试执行准备开始时。1.进入标准的例子验证测试环境是否可用并可以使用。验证环境中安装的测试工具是否可以使用。验证Testable代码是否可用。验证测试数据是否可用并验证数据的正确性。"}, "md/equivalence_partitioning_testing.html": {"url": "md/equivalence_partitioning_testing.html", "title": "Equivalence Partitioning Testing", "keywords": "", "body": "等价划分测试等价划分也称为等价类划分。它缩写为ECP。它是一种软件测试技术，它将被测应用程序的输入测试数据划分为每个划分至少一次可以从中导出测试用例的等效数据。这种方法的一个优点是它减少了由于测试用例数量较少而执行软件测试所需的时间。"}, "md/error.html": {"url": "md/error.html", "title": "Error", "keywords": "", "body": "错误当系统产生的结果不是预期结果或特定动作，操作或过程的结果时，称为错误。错误或错误导致缺陷，并且通常由于各种原因而引发。它可能是系统规范问题或设计问题或编码问题，这会导致缺陷。错误导致缺陷，如果QA发现的缺陷导致失败。"}, "md/error_guessing.html": {"url": "md/error_guessing.html", "title": "Error Guessing", "keywords": "", "body": "错误猜测错误猜测是一种测试技术，它利用测试人员在测试类似应用程序时的技能，直觉和经验来识别可能不容易通过更正式的技术捕获的缺陷。通常在完成更正式的技术之后完成。1.错误猜测的缺点错误猜测的主要缺点是它取决于测试人员的经验，他们正在部署它。另一方面，如果多个测试人员对该过程做出贡献，那么结果可能会更有效。缺陷和故障列表可以用作一组测试的基础，这种系统方法称为故障攻击。"}, "md/error_seeding.html": {"url": "md/error_seeding.html", "title": "Error Seeding", "keywords": "", "body": "错误植入这是一个有意识地向源代码添加错误的过程，可用于评估系统软件测试阶段后的残留错误量。在将错误添加到源代码之后，可以尝试基于找到的种子错误的数量来估计代码中的“真实”错误的数量。"}, "md/exhaustive_testing.html": {"url": "md/exhaustive_testing.html", "title": "Exhaustive Testing", "keywords": "", "body": "穷举测试穷举测试是一种测试方法，其中所有可能的数据组合都用于测试。探索性测试包括在测试开始时存在于软件/数据状态中的隐式数据组合。1.例考虑一个应用程序，其中密码字段接受3个字符，没有连续的重复条目。因此，仅有字母表有26*26*26个输入排列。包括特殊字符和标准字符，还有更多组合。因此，有256*256*256输入组合。"}, "md/exit_criteria.html": {"url": "md/exit_criteria.html", "title": "Exit Criteria", "keywords": "", "body": "退出标准退出标准用于确定给定的测试活动是否已完成。可以从规划，规范和执行中为所有测试活动定义退出标准。退出标准应该是测试计划的一部分，并在规划阶段决定。1.退出标准的示例验证是否已运行所有计划的测试。验证是否已满足要求覆盖水平。验证是否存在未完成的严重缺陷或高严重性缺陷。验证是否所有高风险区域都经过了全面测试。验证软件开发活动是否在预计成本内完成。验证软件开发活动是否在预计的时间表内完成。"}, "md/expected_outcome.html": {"url": "md/expected_outcome.html", "title": "Expected Outcome", "keywords": "", "body": "预期结果在测试设计阶段，编写测试用例，使每个案例都具有预期结果，并与实际结果进行比较。如果有偏差，则称为缺陷。简而言之，在执行测试之前，应记录获得预期结果。在开发测试用例时，我们通常会有以下字段：测试场景测试步骤参数预期结果实际结果"}, "md/exploratory_testing.html": {"url": "md/exploratory_testing.html", "title": "Exploratory Testing", "keywords": "", "body": "探索性测试在存在严重时间压力的测试阶段，采用探索性测试技术，结合测试人员的经验和结构化的测试方法。探索性测试通常作为黑盒测试技术执行，测试人员学习的东西与经验和创造力一起产生新的良好测试运行。1.优点以下是探索性测试的好处：探索性测试需要较少的准备。很快就会发现严重缺陷。测试人员可以对先前结果的结果使用基于推理的方法来指导他们将来的测试。2.缺点以下是探索性测试的缺点：测试无法进行审核。很难跟踪测试的测试。它不可能以完全相同的方式执行并重复早期测试的具体细节。"}, "md/failover_testing.html": {"url": "md/failover_testing.html", "title": "Failover Testing", "keywords": "", "body": "故障转移测试故障转移测试是一种测试技术，可以验证系统能够分配额外资源并在服务器发生故障期间将操作移动到备份系统的能力，这是由于一个或多个原因造成的。这确定系统是否能够在关键故障期间或系统达到性能阈值时处理额外的资源，例如额外的CPU或服务器。1.例故障转移测试对于以下类型的应用程序非常关键：银行申请财务申请电信应用交易平台2.需要考虑的因素在考虑故障转移测试之前，需要考虑以下因素：由于停电造成的公司成本保护系统的成本很可能会中断这种灾难的可能性或可​​能性由于灾难导致的潜在停电期/停机时间"}, "md/failure.html": {"url": "md/failure.html", "title": "Failure", "keywords": "", "body": "失败在某些情况下，产品可能会产生错误的结果。它被定义为交付服务与遵守规范的偏差。并非所有缺陷都会导致失败，因为死代码中的缺陷不会导致失败。1.失败的流程图2.失败的原因环境条件，可能导致硬件故障或任何环境变量的变化。通过键入错误的输入与软件交互时出现人为错误。如果用户试图执行某些操作而意图破坏系统，则可能会发生故障。3.失败的结果失去时间损失金钱商业声誉的丧失伤死亡"}, "md/fault.html": {"url": "md/fault.html", "title": "Fault", "keywords": "", "body": "故障软件故障也称为缺陷，当预期结果与实际结果不匹配时出现。它也可能是计算机程序中的错误，缺陷，故障或错误。大多数错误都是由开发人员，架构师所犯的错误和错误引起的。1.故障类型以下是与any关联的故障类型：业务逻辑错误功能和逻辑故障GUI错误性能故障安全漏洞2.防止错误以下是防止程序员在开发过程中引入错误代码的方法：采用编程技术软件开发方法同行评审代码分析"}, "md/fault_injection_testing.html": {"url": "md/fault_injection_testing.html", "title": "Fault Injection Testing", "keywords": "", "body": "故障注入测试故障注入是一种软件测试技术，它通过在代码中引入故障来改善覆盖范围，并且通常与压力测试一起用于开发软件的稳健性。1.故障注入方法编译时注入这是一种故障注入技术，其中修改源代码以将模拟故障注入系统。运行时注入它利用软件触发器在运行时将故障注入软件系统。触发器可以有两种类型，基于时间的触发器和基于中断的触发器。"}, "md/feasible_path.html": {"url": "md/feasible_path.html", "title": "Feasible Path", "keywords": "", "body": "可行路径分析如果存在对驱动执行沿路径执行的输入值的分配，则可以通过函数或过程的控制流路径。我们还可以使用正则表达式来描述一组路径。可行路径分析取决于：关联类型的常量和函数的变量声明。从开始到结束的路径。1.方法使用白盒测试技术可以很好地分析路径，其中测试用例是根据需求或规范从代码构造的。构建测试用例集合以满足一个或多个覆盖标准。声明范围：程序的每个声明都应以最少的测试次数进行。决策覆盖范围：每项决策的结果都应该是真实和错误的。条件覆盖范围：除了测试每个决策的结果外，还必须通过决策中不同的子条件值来实现每种结果的各种方式。路径覆盖：测试程序中的所有控制流路径。"}, "md/feature_testing.html": {"url": "md/feature_testing.html", "title": "Feature Testing", "keywords": "", "body": "功能测试软件功能可以定义为在系统中进行的更改，以添加新功能或修改现有功能。据说每个功能都具有有用，直观和有效的特性。实际上，创建了一个新的测试集来测试与该版本的那个周期相对应的特征。极其重要且通常使用的新功能应该在该版本的每个版本中进行彻底测试，并且还应该对这些区域进行回归测试。1.如何有效地测试功能理解功能：应该彻底阅读与该功能相对应的要求或规范。构建测试场景：测试人员应专门开发测试用例以测试该功能。因此，可以保持覆盖范围，可追溯性。准备正面和负面数据集：在测试开始之前，测试人员应该拥有涵盖所有可能的负面，正面和边界情况的测试数据。如何实现：测试人员应该知道如何在应用层上实现该功能，并且如果有的话，相关内容会更改为后端。这将使我们明确受影响的区域。早期部署Build：测试人员应该在周期的早期开始测试该功能并报告缺陷，并且应该在整个发布版本中重复相同的过程。"}, "md/functional_decomposition.html": {"url": "md/functional_decomposition.html", "title": "Functional Decomposition", "keywords": "", "body": "功能分解功能分解对应于如何开发原始复杂业务功能的各种功能关系。它主要关注如何开发整体功能及其在各个组件之间的交互。当使用功能分解分解成碎片时，更容易理解大的或复杂的功能。1.何时以及如何功能分解主要在项目分析阶段使用，以生成功能分解图作为功能需求文档的一部分。功能分解是在与业务分析师和主题专业知识会面后完成的。用其功能分解第一级组件，并继续分解到较低级别，直到达到足够的细节水平执行业务操作的端到端演练，并检查每个功能以确认它是否正确。"}, "md/functional_testing.html": {"url": "md/functional_testing.html", "title": "Functional Testing", "keywords": "", "body": "功能测试功能测试是一种测试技术，用于测试系统或软件的特性/功能，应涵盖所有场景，包括故障路径和边界情况。1.功能测试技术有两种主要的功能测试技术，如下所示：其他主要的功能测试技术包括：单元测试集成测试冒烟测试用户验收测试本地化测试接口测试可用性测试系统测试回归测试全球化测试"}, "md/fuzz_testing.html": {"url": "md/fuzz_testing.html", "title": "Fuzz Testing", "keywords": "", "body": "模糊测试模糊测试是一种软件测试技术，使用随机数据作为系统的输入。如果应用程序失败，那么系统将解决这些问题/缺陷。简而言之，意外或随机输入可能会导致意外结果。1.模糊测试阶段以下是模糊测试的关键阶段：2.攻击类型数字/字符模糊应用模糊测试协议模糊测试文件格式模糊"}, "md/glass_box_testing.html": {"url": "md/glass_box_testing.html", "title": "Glass Box Testing", "keywords": "", "body": "白盒测试白盒测试是一种测试技术，用于检查程序结构并从程序逻辑/代码中获取测试数据。白盒测试的其他名称是明确的盒子测试，开箱测试，逻辑驱动测试或路径驱动测试或结构测试。1.白盒测试技术声明覆盖此技术旨在使用最少的测试来执行所有编程语句。分支覆盖此技术正在运行一系列测试，以确保所有分支至少测试一次。路径覆盖此技术对应于测试所有可能的路径，这意味着涵盖了每个语句和分支。2.白盒测试的优点强制测试开发人员仔细推理实施。显示“隐藏”代码中的错误。针对最佳编程实践制定死代码或其他问题。3.白盒测试的缺点昂贵，因为必须花费时间和金钱来执行白盒测试。偶然错过几行代码的每种可能性。有关编程语言的深入知识是执行白盒测试所必需的。"}, "md/globalization_testing.html": {"url": "md/globalization_testing.html", "title": "Globalization Testing", "keywords": "", "body": "全球化测试当该产品可以独立于其地理和文化环境运行时，该产品被称为全球化。这种类型的测试技术验证了应用程序是否可以在全世界范围内使用，并且可以接受所有语言文本。1.需要测试什么对语言词汇的敏感性日期和时间格式货币处理用于打印的纸张尺寸地址和电话号码格式邮政编码格式2.全球化测试的优势它降低了整体测试和支持成本它有助于我们缩短测试时间，从而缩短产品上市时间它更灵活，产品易于扩展"}, "md/gorilla_testing.html": {"url": "md/gorilla_testing.html", "title": "Gorilla Testing", "keywords": "", "body": "大猩猩测试Gorilla测试是一种测试技术，测试人员，有时开发人员也会与测试人员联手，在各个方面彻底测试特定模块。大猩猩测试是一种技术，其中重复的手动测试过程，测试人员之前已经做过几次，再次完成，以测试系统的稳健性。"}, "md/grey_box_testing.html": {"url": "md/grey_box_testing.html", "title": "Grey Box Testing", "keywords": "", "body": "灰盒测试灰盒测试是使用有关系统内部功能的有限信息执行的测试技术。GrayBox测试人员可以访问详细的设计文档以及有关需求的信息。基于状态模型，UML图或目标系统的体系结构图生成灰盒测试。1.灰盒测试技术回归测试模式测试正交阵列测试矩阵测试2.优点灰盒测试提供了白盒测试和黑盒测试的综合优势它基于功能规范，UML图，数据库图或架构视图灰盒测试仪手柄可以更智能地设计复杂的测试场景灰盒测试的附加优势在于它保持了独立测试人员和开发人员之间的界限3.缺点在灰盒测试中，由于无法访问源代码/二进制文件，无法完成白盒测试。当我们对分布式系统执行灰盒测试时，很难将缺陷关联起来。4.最适合的应用程序灰盒测试非常适合基于Web的应用程序。灰盒测试也是功能或域测试的最佳方法。"}, "md/gui_software_testing.html": {"url": "md/gui_software_testing.html", "title": "GUI Software Testing", "keywords": "", "body": "GUI软件测试GUI测试是一种测试技术，其中测试应用程序的用户界面是否应用程序在用户界面行为方面按预期执行。GUI测试包括键盘和鼠标移动的应用程序行为，以及工具栏，按钮，菜单栏，对话框，编辑字段，列表，行为等不同GUI对象对用户输入的影响。1.GUI测试指南检查屏幕验证验证所有导航检查可用性条件验证数据完整性验证对象状态验证日期字段和数字字段格式"}, "md/harness.html": {"url": "md/harness.html", "title": "Harness", "keywords": "", "body": "线束-测试工具测试工具，也称为自动测试框架，主要由开发人员使用。测试工具提供存根和驱动程序，用于复制缺失的项目，这些项目是与被测软件交互的小程序。1.测试线束特点在框架内执行一组测试或使用测试工具键入被测应用程序的输入为调试提供灵活性和支持捕获被测软件生成的输出记录每个测试的测试结果（通过/失败）帮助开发人员在代码级别测量代码覆盖率。2.测试线束的好处随着自动化的到位，提高了生产力。随着自动化提高软件质量，我们可以提高效率。提供可以安排的测试。可以处理测试人员发现难以模拟的复杂条件。"}, "md/heuristics.html": {"url": "md/heuristics.html", "title": "Heuristics", "keywords": "", "body": "启发式启发式是指基于经验的技术解决问题，学习和发现的非最佳解决方案。1.软件可测试性的启发式可控性软件和硬件状态可由测试工程师控制，软件模块可独立测试可观察性检查对象或系统状态以及影响输出的所有其他因素。可用性检查源代码是否可以在产品分阶段发展时访问。简单检查设计是否一致。检查功能简单，结构简单和代码简单性。稳定性检查软件的更改是否不频繁，并且是否控制和传达更改。2.用户界面设计（UID）的启发式接口系统状态的可见性系统与现实世界相匹配一致性和标准防止错误灵活性和使用效率美学和简约的设计帮助和文档"}, "md/hybrid_integration_testing.html": {"url": "md/hybrid_integration_testing.html", "title": "Hybrid Integration Testing", "keywords": "", "body": "混合集成测试集成测试是软件测试的一个阶段，其中独立模块被组合并作为单个实体进行测试。在该阶段期间，测试这些模块中的每一个之间的接口和通信。集成测试有两种流行的方法，即自上而下的集成测试和自下而上的集成测试。在混合集成测试中，我们利用自上而下和自下而上的方法的优势。顾名思义，我们使用了两种集成技术。1.混合集成测试-功能它被视为三层；即-主要目标图层，目标图层上方的图层和目标图层下方的图层。测试主要针对中级目标层，并根据系统特性和代码结构进行选择。如果客户希望尽快处理应用程序的工作版本，旨在在开发周期的早期阶段生成基本工作系统，则可以采用混合集成测试。"}, "md/implementation_testing.html": {"url": "md/implementation_testing.html", "title": "Implementation Testing", "keywords": "", "body": "实施测试让我们先了解实施意味着什么。实施是为制定的计划采取行动的过程。在我们实施之前，该计划应该已经完成​​，我们的目标应该是明确的。测试计划中制定的每个行动都被认为是实施测试。"}, "md/incremental_testing.html": {"url": "md/incremental_testing.html", "title": "Incremental Testing", "keywords": "", "body": "增量测试单元测试完成后，开发人员执行集成测试。它是验证模块之间的接口和交互的过程。在集成时，开发人员使用了许多技术，其中之一就是增量方法。在增量集成测试中，开发人员使用存根或驱动程序逐个集成模块以发现缺陷。这种方法称为增量集成测试。相反，大爆炸是另一种集成测试技术，其中所有模块都集成在一起。1.增量测试方法自顶向下集成-此类集成测试从上到下进行。不可用组件或系统由存根替代自下而上的集成-这种类型的集成测试从下到上进行。不可用的组件或系统由驱动程序替代功能增量-集成和测试基于功能规范文档的功能或功能进行。2.增量测试-功能每个模块都在项目/产品结构中发挥着决定性的作用每个模块都有明确定义的依赖关系，其中一些只能在运​​行时知道。增量集成测试的更大优势在于，当相对容易检测到相同的根本原因时，可以在较小的组件中尽早发现缺陷。缺点是它可能是耗时的，因为必须开发存根和驱动器以执行这些测试。"}, "md/independent_testing.html": {"url": "md/independent_testing.html", "title": "Independent Testing", "keywords": "", "body": "独立测试独立测试对应于一个独立的团队，他们参与测试除开发人员以外的活动，以避免作者偏见，并且通常更有效地发现缺陷和失败。1.独立测试水平以下列表显示了测试的独立性水平不断提高：由开发人员自己完成测试独立测试人员割让给了开发团队组织内的独立测试团队不同组织的独立测试人员其他组织的外包测试团队成员2.优点测试人员从中立的角度看待每个缺陷测试仪完全没有偏见测试人员会看到已经构建的内容而不是开发人员的想法测试人员不对质量做出任何假设3.缺点从开发团队中隔离有时会导致过时的文档引用。独立测试执行通常是最后阶段，并受到过程早期任何延迟的影响。开发人员可能对质量不负责任，因为他们可能会认为独立测试团队可以在系统中找到问题独立测试有时可能成为沟通的障碍。"}, "md/infeasible_path.html": {"url": "md/infeasible_path.html", "title": "Infeasible Path", "keywords": "", "body": "不可行路径软件测试上下文中的不可行路径可以定义为无法通过任何可能的输入值集和最昂贵的软件测试活动来验证的路径。这是一种白盒测试技术，通过绘制已开发代码的流程图并找出任何类型数据永远无法达到的路径来识别。"}, "md/inspection.html": {"url": "md/inspection.html", "title": "Inspection", "keywords": "", "body": "检查检查是最正式的审查形式，是静态测试阶段采用的策略。1.检查特点检查通常由训练有素的主持人领导，主持人不是作者。主持人的角色是对文档进行同行检查检查是最正式的，由检查表和规则驱动。此审核流程使用进入和退出标准。进行会前准备工作至关重要。准备检查报告并与作者分享以采取适当的行动。检查后，使用正式的后续流程来确保及时和及时的纠正措施。检查的目的不仅是识别缺陷，还要引入过程改进。"}, "md/install_uninstall_testing.html": {"url": "md/install_uninstall_testing.html", "title": "Install/Uninstall Testing", "keywords": "", "body": "安装/卸载测试安装测试：执行此操作以验证软件是否已安装所有必需组件，并且应用程序是否按预期工作。这非常重要，因为安装将是与最终用户的第一次用户交互。卸载测试：执行卸载测试以验证在此过程中是否删除了应用程序的所有组件。成功卸载后，必须删除与应用程序相关的所有文件及其文件夹结构。卸载后系统应该能够恢复稳定状态。公司推出Beta版本只是为了确保更顺利地过渡到实际产品。1.安装类型以下是安装类型：静默安装参加安装无人值守安装网络安装清洁安装自动安装"}, "md/integration_testing.html": {"url": "md/integration_testing.html", "title": "Integration Testing", "keywords": "", "body": "集成测试完成单元测试后，将集成单元或模块，从而提高集成测试。集成测试的目的是验证集成模块之间的功能，性能和可靠性。1.整合策略Big-Bang整合自上而下整合自下而上的整合混合集成"}, "md/interface_testing.html": {"url": "md/interface_testing.html", "title": "Interface Testing", "keywords": "", "body": "接口测试执行接口测试以评估系统或组件是否传递数据并相互正确控制。它是验证这些模块之间的所有交互是否正常工作并且错误得到妥善处理。1.接口测试-核对表验证系统之间的通信是否正确完成验证是否已测试所有支持的硬件/软件验证是否在所有平台上支持/打开所有链接的文档在系统之间进行通信时验证安全要求或加密检查解决方案是否可以处理网站和应用程序服务器之间的网络故障"}, "md/internationalization_testing.html": {"url": "md/internationalization_testing.html", "title": "Internationalization Testing", "keywords": "", "body": "国际化测试国际化测试是验证被测应用程序在多个地区和文化中统一工作的过程。国际化的主要目的是检查代码是否可以处理所有国际支持，而不会破坏可能导致数据丢失或数据完整性问题的功能。全球化测试会验证产品是否具有适用于任何区域设置的功能。1.国际化清单测试以检查产品是否跨设置工作。使用各种设置验证安装。验证产品是否适用于语言设置和货币设置。"}, "md/inter_systems_testing.html": {"url": "md/inter_systems_testing.html", "title": "Inter Systems Testing", "keywords": "", "body": "系统间测试很多时候，应用程序跨地点托管；但是，所有数据都需要部署在中心位置。测试托管在不同位置的单个应用程序的集成点，然后确保跨每个位置的正确数据流的过程称为系统间测试。"}, "md/isolation_testing.html": {"url": "md/isolation_testing.html", "title": "Isolation Testing", "keywords": "", "body": "隔离测试隔离测试是将系统分解为各种模块的过程，以便可以孤立地轻松发现缺陷。特别是当开发团队很难找到并解决bug时，就会发生这种情况。1.隔离特性测试这是一个耗时的过程，应该有一些存根和驱动程序可以单独重新测试每一个它很昂贵，因为所有物品都要分成几块，以使其具有原子性。它精确地验证每个接口/子系统的输出。"}, "md/issues.html": {"url": "md/issues.html", "title": "Issues", "keywords": "", "body": "问题在软件测试领域，诸如问题，缺陷和错误之类的术语可以互换使用。但是，问题可以定义为完成系统改进的工作单元。它可能是一个错误，一个变更请求，任务，缺少文档等。通常通过指定严重性（高，中，低或整容）来提高。以下是Bug生命周期的工作流程：1.问题的生命周期2.问题的参数以下详细信息应该是Bug的一部分：发行日期，作者，批准和状态。事件的严重性和优先级。显示问题的相关测试用例。预期和实际结果。识别测试项目和环境。有关重现步骤的事件描述。事件的状况。结论，建议和批准。"}, "md/keyword_driven_testing.html": {"url": "md/keyword_driven_testing.html", "title": "Keyword Driven Testing", "keywords": "", "body": "关键字驱动测试关键字驱动测试是一种功能自动化测试框架，也称为表驱动测试或基于动作字的测试。在关键字驱动的测试中，我们使用表格格式（通常是电子表格）来为我们想要执行的每个函数定义关键字或操作字。1.好处它最适合新手或非技术测试人员。使用此方法可以以更抽象的方式编写测试。关键字驱动的测试允许在SDLC中更早地启动自动化，甚至在为测试提供稳定的构建之前。具有高度的可重用性。2.缺点开发关键字及其相关功能的初期投资可能需要更长时间。它可能会对技术能力强的测试人员产生限制。"}, "md/key_performance_indicator.html": {"url": "md/key_performance_indicator.html", "title": "Key Performance Indicator", "keywords": "", "body": "关键绩效指标关键绩效指标（或KPI）通常用于评估软件过程效率评估。分析了重要参数及其用法，并使用测量结果来触发任何过程改进。"}, "md/known_issues.html": {"url": "md/known_issues.html", "title": "Known Issues", "keywords": "", "body": "已知的问题有时在代码冻结之后，可能存在中等或低优先级缺陷，由于时间限制或预算而无法修复。因此，该软件将以已知的缺陷/问题发布到市场中。这些问题不是系统中的关键或紧迫缺陷。已知问题通常会记录在案，并会在产品发货时添加为注释。"}, "md/lcsaj_testing.html": {"url": "md/lcsaj_testing.html", "title": "LCSAJ Testing", "keywords": "", "body": "LCSAJ测试LCSAJ代表线性代码序列和跳转，这是一种白盒测试技术，用于识别代码覆盖率，从程序或分支开始，到程序结束或分支结束。LCSAJ由测试组成，相当于声明范围。1.LCSAJ特点100%LCSAJ意味着100%的报表覆盖率100%LCSAJ意味着100%的分支机构覆盖范围100%程序或函数调用覆盖率100%多条件覆盖率"}, "md/load_generator.html": {"url": "md/load_generator.html", "title": "Load Generator", "keywords": "", "body": "负载生成器LoadGenerator是一个系统，用于模拟负载以执行性能测试。它可以用于并发性测试或SQL性能测试。它是一个系统，它发送远程称为主机系统或负载驱动系统的请求。负载生成器之间的负载分配是在执行负载测试时生成负载的常用方法。"}, "md/load_testing.html": {"url": "md/load_testing.html", "title": "Load Testing", "keywords": "", "body": "负载测试负载测试是性能测试技术，使用该技术在各种负载条件下测量系统的响应。负载测试是针对正常和峰值负载条件执行的。1.负载测试方法评估绩效验收标准确定关键情景设计工作量模型确定目标负载级别设计测试执行测试分析结果2.负载测试的目标响应时间吞吐量资源利用率最大用户负载与业务相关的指标"}, "md/localization_testing.html": {"url": "md/localization_testing.html", "title": "Localization Testing", "keywords": "", "body": "本地化测试执行本地化测试以验证特定目标文化/区域设置的产品本地化的质量，并且仅在产品的本地化版本上执行。1.本地化测试-特点受本地化影响的模块，例如UI和内容特定于Culture/locale特定，语言特定和特定于区域的模块关键业务场景测试安装和升级测试在本地化环境中运行根据产品的目标区域规划应用程序和硬件兼容性测试。2.本地化测试-UI测试检查语言错误和资源属性印刷错误验证系统是否符合输入，并显示环境标准用户界面的可用性测试验证UI的文化适宜性，例如颜色，设计等。"}, "md/logic_coverage_test.html": {"url": "md/logic_coverage_test.html", "title": "Logic Coverage", "keywords": "", "body": "逻辑覆盖测试逻辑对应于代码的内部结构，并且该测试用于安全关键应用，例如航空工业中使用的软件。此测试验证表达式的真值分配总数的子集。1.逻辑覆盖测试逻辑覆盖范围来自以下任何来源：计划的决定有限状态机和状态图要求"}, "md/loop_testing.html": {"url": "md/loop_testing.html", "title": "Loop Testing", "keywords": "", "body": "循环测试循环测试执行白盒测试技术以验证循环。如下所述有四种循环：简单的循环嵌套循环连锁循环非结构化循环1.循环测试中测试了什么循环测试显示循环初始化问题。通过循环一次，可以确定循环中的未初始化变量。测试还可以解决循环重复问题。循环也可以揭示容量/性能瓶颈。"}, "md/maintainability.html": {"url": "md/maintainability.html", "title": "Maintainability Testing", "keywords": "", "body": "可维护性测试可维护性对应于更新或修改被测系统的能力。这是一个非常重要的参数，因为系统在整个软件生命周期中都会发生变化。为了使维护性测试更有效，测试人员应该包括静态分析和评论，因为这些在动态测试期间很难发现，而在代码演练和检查中很容易捕获。1.可维护性测试清单验证开发标准，例如结构化编程，数据库方法标准，可识别的术语和用户界面标准验证数据处理是否拆分为子事务？验证输入，处理和输出是否已单独实施验证程序是否已在必要条件下参数化以促进可重用性。验证系统是否已分发。验证算法是否已优化。"}, "md/manual_testing.html": {"url": "md/manual_testing.html", "title": "Manual Testing", "keywords": "", "body": "手动测试手动测试是一种手动执行的测试过程，用于在不使用工具或自动化脚本的情况下查找缺陷。准备一份测试计划文档，作为测试过程的指南，以获得完整的测试覆盖率。1.什么是手动测试以下是在测试生命周期中手动执行的测试技术：验收测试白盒测试黑盒测试单元测试系统测试集成测试"}, "md/model_based_testing.html": {"url": "md/model_based_testing.html", "title": "Model Based Testing", "keywords": "", "body": "基于模型的测试基于模型的测试是一种软件测试技术，其中测试用例来自描述被测系统功能方面的模型。它利用模型生成包括离线和在线测试的测试。1.基于模型的测试-重要性单元测试不足以检查功能确保系统在相同的操作序列中运行。基于模型的测试技术已被采用作为测试过程的集成部分。开发商业工具以支持基于模型的测试。2.好处实现更高水平的自动化。彻底的测试是可能的。可以轻松测试对模型的更改。3.缺点需要正式的规范或模型才能进行测试。对模型的更改可能会导致完全不同的测试集。测试用例与模型紧密耦合。"}, "md/modified_condition_coverage.html": {"url": "md/modified_condition_coverage.html", "title": "Modified Condition Coverage", "keywords": "", "body": "修改条件覆盖范围修改的条件/决策覆盖范围通过要求显示每个条件独立地影响决策的结果来增强条件/决策覆盖标准。这种测试是在关键任务应用程序上执行的，可能导致死亡，伤害或金钱损失。设计修改的条件覆盖或决策覆盖需要更加周到地选择在独立模块或集成组件上执行的测试用例。1.修改条件覆盖的特征程序中的每个入口和出口点至少被调用一次。每个决定都经过了分支机构所有可能结果的测试。该计划决策中的每个条件都至少采取了一次可能的结果。决策中的每个条件都被证明可以独立地影响该决策的结果。"}, "md/modularity_driven_testing.html": {"url": "md/modularity_driven_testing.html", "title": "Modularity Driven Testing", "keywords": "", "body": "模块化驱动测试模块化驱动测试是一种自动化测试框架，其中为被测应用程序开发了小型，独立的自动化脚本模块。这些单独的脚本一起构造以形成实现特定测试用例的测试。"}, "md/monkey_testing.html": {"url": "md/monkey_testing.html", "title": "Monkey Testing", "keywords": "", "body": "猴子测试Monkey测试是一种软件测试技术，其中测试是在被测系统上随机进行的。用于测试的输入数据也随机生成并键入系统。1.猴子测试的特点以下是Monkey测试的特点：此测试非常随机，测试人员可能无法重现错误/缺陷。该方案可能无法定义，可能不是正确的商业案例。MonkeyTesting需要具有非常好的领域和技术专长的测试人员。2.猴子测试的优点由于测试的方案是临时的，系统可能会处于压力之下，因此我们也可以检查服务器响应。采用此测试来完成测试，特别是在存在资源/时间紧缩的情况下。"}, "md/mutation_testing.html": {"url": "md/mutation_testing.html", "title": "Mutation Testing", "keywords": "", "body": "突变测试突变测试是一种结构测试技术，它使用代码结构来指导测试过程。在很高的层次上，它是以小的方式重写源代码以删除源代码中的冗余的过程如果不修复，这些模糊可能会导致软件出现故障，并且很容易通过未检测到的测试阶段。1.突变测试的好处如果采用突变测试，则会有以下好处：它给开发人员的注意带来了一种全新的错误。它是检测隐藏缺陷的最有效方法，使用传统测试技术可能无法识别隐藏缺陷。Insure++等工具帮助我们使用最先进的技术在代码中找到缺陷。提高客户满意度指数，因为产品将减少错误。调试和维护产品将比以往更容易。2.突变测试类型值突变：尝试更改值以检测程序中的错误。我们通常将一个值更改为更大的值，或将一个值更改为更小的值。最常见的策略是更改常量。决策突变：更改决策/条件以检查设计错误。通常，一个人改变算术运算符来定位缺陷，我们也可以考虑改变所有关系运算符和逻辑运算符（AND，OR，NOT）语句突变：通过删除或复制开发人员从其他位置复制粘贴代码时可能出现的行来对语句所做的更改。"}, "md/negative_testing.html": {"url": "md/negative_testing.html", "title": "Negative Testing", "keywords": "", "body": "负面测试执行负面测试以确保在发出意外输入时，测试中的产品或应用程序不会失败。负面测试的目的是打破系统并在无意输入期间验证应用程序响应。1.负面测试特征执行负测试以发现可能导致严重故障的故障。执行负面测试以揭示软件弱点和利用潜力。执行此操作是为了显示数据损坏或安全漏洞。2.负面测试技术以下是软件测试中采用的负面测试技术：在尝试查询数据库时在URL上嵌入单引号。跳过所需的数据输入并尝试继续。验证每个字段类型测试。输入较大的值以测试字段的大小。验证数字边界和数字大小测试。验证日期格式及其有效性。验证Web会话并检查性能。"}, "md/non_functional_testing.html": {"url": "md/non_functional_testing.html", "title": "Non-Functional Testing", "keywords": "", "body": "非功能测试非功能测试是一种软件测试技术，用于验证系统的属性，例如内存泄漏，性能或系统的健壮性。在所有测试级别执行非功能测试。1.非功能测试技术基线测试兼容性测试合规性测试耐力测试负载测试本地化测试国际化测试性能测试恢复测试弹性测试安全测试可伸缩性测试压力测试可用性测试体积测试"}, "md/operational_testing.html": {"url": "md/operational_testing.html", "title": "Operational Testing", "keywords": "", "body": "操作验收测试操作验收测试（OAT），一种测试技术，用于验证作为软件测试生命周期一部分的测试中的产品或应用程序的操作准备（预发布）。该测试技术主要关注系统的运行准备情况，该系统应该模仿生产环境。1.操作验收测试的类型运营文件审查代码分析安装测试端到端测试环境运行测试服务水平协议监控测试负载和性能测试操作安全测试备份和还原测试故障转移测试恢复测试2.OAT测试方法构建系统以模仿Prod环境部署构建系统的可支持性备份/恢复过程验证"}, "md/orthogonal_array_testing.html": {"url": "md/orthogonal_array_testing.html", "title": "Orthogonal Array Testing", "keywords": "", "body": "正交阵列测试正交阵列测试是一种黑盒测试技术的系统统计方法，当被测应用程序的输入数量很少但过于复杂而无法进行详尽的测试时使用。1.正交阵列测试特性OAT是成对相互作用的系统和统计方法。执行定义明确且精确的测试可能会发现大多数缺陷。100%正交阵列测试意味着100%成对测试。"}, "md/pair_testing.html": {"url": "md/pair_testing.html", "title": "Pair Testing", "keywords": "", "body": "配对测试配对测试是一种软件测试技术，其中两个人通过不断交换想法在同一时间在同一地点测试相同的功能。它产生了更多的想法，可以更好地测试被测应用程序。1.对测试的特点测试是一个开放式的缺陷搜寻过程。配对测试可以快速，低成本地生成更有效的测试用例。成对形成测试人员将使测试经理能够收集组内测试人员的表现。配对测试是指导和培训团队中新手的最佳方法。成对测试可在团队内产生正能量，并增强协调性。将领域专家与新手测试人员配对，以在团队中开发领域知识。"}, "md/pairwise_testing.html": {"url": "md/pairwise_testing.html", "title": "Pairwise Testing", "keywords": "", "body": "成对测试成对测试也称为全对测试，是一种使用组合方法测试软件的测试方法。这是一种测试所涉及参数的所有可能离散组合的方法。假设我们有一个要测试的软件，每个输入字段有10个输入字段和10个可能的设置，那么有10^10个可能的输入要测试。在这种情况下，即使我们希望测试所有组合，也无法进行详尽的测试。"}, "md/parallel_testing.html": {"url": "md/parallel_testing.html", "title": "Parallel Testing", "keywords": "", "body": "并行测试并行测试是一种测试技术，其中在两个不同版本的应用程序中输入相同的输入并报告异常。1.并行测试的特点确保新版本的应用程序正确执行。确保旧版本和新版本之间的一致性和不一致性。确保新应用程序的完整性。验证两个版本之间的数据格式是否已更改。"}, "md/partial_test_automation_testing.html": {"url": "md/partial_test_automation_testing.html", "title": "Partial Test Automation", "keywords": "", "body": "部分测试自动化在软件测试中，有许多过程不符合完全自动化的需要。部分自动化使组织能够观察到自动化的好处，而无需花费太多的成本和时间。由于许多原因，很少有测试用例无法实现自动化。在这种情况下，自动化完成的程度非常有益，其余的测试都是手动执行的。1.部分自动化场景以下是部分自动化的潜在候选者：工具限制工具不提供访问这些对象的方法。投资回报率低在一些可能在一段时间内不具成本效益的情景下投入时间。执行时间自动化中的某些方案可能比手动测试需要更多时间来执行。"}, "md/passive_testing.html": {"url": "md/passive_testing.html", "title": "Passive Testing", "keywords": "", "body": "被动测试被动测试是一种软件测试技术，可以在没有交互的情况下观察系统。另一方面，主动测试涉及与系统的交互。"}, "md/path_testing.html": {"url": "md/path_testing.html", "title": "Path Testing", "keywords": "", "body": "路径测试路径测试是一种基于源代码或算法的结构测试方法，而不是基于规范。它可以应用于不同的粒度级别。1.路径测试假设规格准确正确定义和访问数据除影响控制流程的系统外，系统中不存在任何缺陷2.路径测试技术控制流图（CFG）通过将代码表示为节点，区域和边缘，将程序转换为流图。对决策路径（DD）的决策可以将CFG分解为各种决策到决策路径，然后折叠到单个节点中。独立（基础）路径独立路径是通过DD路径图的路径，其不能通过其他方法从其他路径再现。"}, "md/peer_review.html": {"url": "md/peer_review.html", "title": "Peer Review", "keywords": "", "body": "同行评审同行评审，审查技术，这是一种静态白盒测试，用于在生命周期的早期发现缺陷，这是黑盒测试技术无法检测到的。1.同行评审-静态测试2.同行评审特征同行评审已记录在案，并使用缺陷检测流程，该流程由同行和技术专家作为审核流程的一部分。审核流程不涉及管理层参与。它通常由训练有素的主持人领导，而主持人不是作者。编写报告时列出了需要解决的问题清单。"}, "md/penetration_testing.html": {"url": "md/penetration_testing.html", "title": "Penetration Testing", "keywords": "", "body": "渗透测试渗透测试黑盒测试技术，其中授权尝试违反以系统，应用程序，网络或数据库的安全性或完整性策略的形式陈述的特定约束。它是一种用于发现和记录系统中可以找到的所有安全漏洞的测试技术。安全测试永远不能证明没有安全漏洞，但它可以证明它们的存在。1.渗透测试阶段范围/目标定义信息收集漏洞检测信息分析与规划。攻击和渗透/权限提升。结果分析和报告。清理。"}, "md/performance_testing.html": {"url": "md/performance_testing.html", "title": "Performance Testing", "keywords": "", "body": "性能测试性能测试，一种非功能性测试技术，用于根据各种工作负载下的响应性和稳定性确定系统参数。性能测试测量系统的质量属性，例如可伸缩性，可靠性和资源使用。1.性能测试技术负载测试这是最简单的测试形式，用于了解特定负载下系统的行为。负载测试将导致测量重要的业务关键事务，并且还监视数据库，应用程序服务器等的负载。压力测试执行此操作以查找系统的上限容量，并确定当前负载远高于预期最大值时系统的执行情况。浸泡测试浸泡测试也称为耐久性测试，用于确定连续预期负载下的系统参数。在浸泡测试期间，监视诸如内存利用率的参数以检测内存泄漏或其他性能问题。主要目的是发现系统在持续使用下的性能。尖峰测试尖峰测试是通过非常大量地增加用户数量并测量系统性能来执行的。主要目的是确定系统是否能够承受工作量。2.性能测试流程3.性能测试的属性速度可扩展性稳定性可靠性"}, "md/portability_testing.html": {"url": "md/portability_testing.html", "title": "Portability Testing", "keywords": "", "body": "可移植性测试可移植性测试是一个轻松测试的过程，软件或产品可以从一个环境移动到另一个环境。它是根据从一个系统转移到另一个系统所需的最大努力量来衡量的。可移植性测试在整个软件开发生命周期中以迭代和增量方式定期执行。1.可移植性测试属性以下是可移植性测试的属性：适应性易安装替换性共存2.可移植性测试清单验证应用程序是否能够满足可移植性要求。在各种浏览器类型和各种浏览器版本中确定应用程序的外观。向开发团队报告缺陷，以便将它们关联起来并修复缺陷。可移植性测试期间的故障有助于识别在单元和集成测试期间未检测到的缺陷。"}, "md/positive_testing.html": {"url": "md/positive_testing.html", "title": "Positive Testing", "keywords": "", "body": "正面测试正面测试是一种测试技术，用于表明测试中的产品或应用程序可以完成预期的操作。正面测试验证应用程序对正数据集的行为方式。肯定测试验证应用程序是否在不应该显示错误时显示错误并在应该时显示错误。"}, "md/post_condition.html": {"url": "md/post_condition.html", "title": "Post Condition", "keywords": "", "body": "后置条件PostCondition是一个语句或一组语句，用于描述操作结果，如果操作已完成其任务，则为true。PostCondition语句指示操作完成任务时的真实情况。"}, "md/pre_condition.html": {"url": "md/pre_condition.html", "title": "Pre-Condition", "keywords": "", "body": "前置条件前置条件是一个语句或一组语句，用于概述在调用操作时应该为true的条件。前置条件语句指示在调用函数之前必须存在的内容。"}, "md/predicted_outcome.html": {"url": "md/predicted_outcome.html", "title": "Predicted Outcome", "keywords": "", "body": "预测结果在测试设计阶段，编写测试用例，使每个案例具有预期或预测的结果，并与实际结果进行比较。如果有偏差，则称为缺陷。在获得预测结果后，应在执行测试之前记录，也称为预期结果。在开发测试用例时，我们通常会有以下字段：测试场景测试步骤参数预期/预测结果实际结果"}, "md/priority.html": {"url": "md/priority.html", "title": "Priority", "keywords": "", "body": "优先级优先级定义为应解决缺陷的顺序。优先级状态通常由测试团队设置，同时针对开发团队提出缺陷，提及修复缺陷的时间范围。优先级状态根据最终用户要求设置。例如：如果公司徽标未正确放置在公司的网页中，则优先级较高但严重程度较低。1.优先清单优先级可以标记为以下任一状态：低在修复关键缺陷后，可以修复此缺陷。中缺陷应在后续构建中解决。高必须立即解决缺陷，因为缺陷在很大程度上影响了应用程序，并且相关模块在修复之前无法使用。紧急必须立即解决缺陷，因为缺陷严重影响应用程序或产品，并且产品在修复之前无法使用。"}, "md/process_cycle_test.html": {"url": "md/process_cycle_test.html", "title": "Process Cycle Test", "keywords": "", "body": "流程周期测试流程周期测试，一种黑盒测试设计技术，其中测试用例旨在执行业务场景。1.流程周期测试步骤建立路径组合。测试措施的选择。建立路径。指定测试。建立初始数据集。集成测试脚本。"}, "md/progressive_testing.html": {"url": "md/progressive_testing.html", "title": "Progressive Testing", "keywords": "", "body": "渐进式测试渐进式测试也称为增量测试，用于一个接一个地测试模块。当正在测试具有诸如父子模块的层次结构的应用程序时，需要首先测试相关模块。这种渐进式方法测试方法有三种方法：自上而下的方法自下而上的方法混合方法"}, "md/prototype_testing.html": {"url": "md/prototype_testing.html", "title": "Prototype Testing", "keywords": "", "body": "原型测试原型测试旨在在网站上线之前发现缺陷。在线原型测试允许无缝地收集定量，定性和行为数据，同时评估用户体验。1.原型测试的特点在实际上线之前评估新设计，以确保设计清晰，易于使用并满足用户要求。最好是在开发过程中内置迭代测试，以便可以经常轻松地进行更改，以确保在上线之前不会出现重大问题。提供有关新设计方向的确认，品牌和消息传递正朝着正确的方向发展。"}, "md/quality_assurance.html": {"url": "md/quality_assurance.html", "title": "Quality Assurance", "keywords": "", "body": "质量保证质量保证被定义为用于向利益相关者提供做出明智决策所需数据的审计和报告程序。它是系统满足指定要求和客户期望的程度。它还监控整个SDLC的流程和产品。1.质量保证标准以下是评估软件的质量保证标准：正确性效率灵活性廉正互通性可维护性可移植性可靠性可重用性可测试性可用性"}, "md/quality_control.html": {"url": "md/quality_control.html", "title": "Quality Control", "keywords": "", "body": "质量控制质量控制是组织用于实现质量参数或质量目标的一套方法，并不断提高组织确保软件产品满足质量目标的能力。1.质量控制流程2.控制软件质量的三个类参数是制品流程资源3.全面质量控制流程包括计划-这是计划质量控制流程的阶段执行-使用定义的参数来提高质量检查-阶段以验证是否满足参数的质量法案-如果需要采取纠正措施并重复工作4.质量控制特点采用流程以最佳成本向客户提供优质产品。目标是向其他组织学习，以便每次都能提高质量。通过正确的审核流程，通过正确的计划和执行来避免错误。"}, "md/quality_management.html": {"url": "md/quality_management.html", "title": "Quality Management", "keywords": "", "body": "质量管理软件质量管理通过提交产品开发过程的改进，确保达到所需的质量水平。SQA旨在发展团队内部的文化，并将其视为每个人的责任。软件质量管理应独立于项目管理，以确保成本和计划遵守的独立性。它直接影响工艺质量，间接影响产品质量。1.软件质量管理活动质量保证质量保证旨在制定组织层面的组织程序和质量标准。质量计划为特定项目选择适用的程序和标准，并根据需要进行修改以制定质量计划。质量控制确保软件开发团队遵循最佳实践和标准，以生产高质量的产品。"}, "md/random_testing.html": {"url": "md/random_testing.html", "title": "Random Testing", "keywords": "", "body": "随机测试随机测试，也称为猴子测试，是一种功能性黑盒测试形式，在没有足够的时间编写和执行测试时执行。1.随机测试特征进行随机测试，其中缺陷未定期识别。随机输入用于测试系统的可靠性和性能。比实际测试工作节省时间和精力。其他测试方法不能用于。2.随机测试步骤识别随机输入以针对系统进行评估。测试输入独立于测试域进行选择。使用这些随机输入执行测试。记录结果并与预期结果进行比较。重现/复制问题并提出缺陷，修复和重新测试。"}, "md/recovery_testing.html": {"url": "md/recovery_testing.html", "title": "Recovery Testing", "keywords": "", "body": "恢复测试恢复测试是一种非功能性测试技术，用于确定系统在经历系统崩溃或硬件故障后恢复的速度。恢复测试是软件强制失败以验证恢复是否成功。1.恢复计划-步骤确定恢复过程的可行性。验证备份设施。确保记录正确的步骤以验证备份设施的兼容性。在团队内提供培训。展示组织从所有严重故障中恢复的能力。定期维护和更新恢复计划。"}, "md/regression_testing.html": {"url": "md/regression_testing.html", "title": "Regression Testing", "keywords": "", "body": "回归测试回归测试黑盒测试技术，包括重新执行受代码更改影响的测试。应在整个软件开发生命周期中尽可能频繁地执行这些测试。1.回归测试的类型最终回归测试：执行“最终回归测试”以验证在一段时间内未更改的构建。此构建部署或发送给客户。回归测试：执行正常的回归测试，以验证构建是否因最近的代码更改而未破坏应用程序的任何其他部分以进行缺陷修复或增强。2.选择回归测试需要了解系统及其如何通过现有功能进行影响。根据频繁缺陷的区域选择测试。选择测试以包括已经多次进行代码更改的区域。根据特征的关键性选择测试。3.回归测试步骤回归测试自动化导致更好的理想的情况下（ROI）。选择回归测试。选择apt工具并自动进行回归测试使用检查点验证应用程序管理回归测试/在需要时更新安排测试与构建集成分析结果"}, "md/release_candidate.html": {"url": "md/release_candidate.html", "title": "Release Candidate", "keywords": "", "body": "发布候选ReleaseCandidate（RC）是内部发布的构建版本，用于检查在上一个开发期间是否有任何关键问题未被检测到代码中。发布候选版本不适用于生产部署，但它们仅用于测试目的。但是，在大多数情况下，最终构建和最后一个候选版本之间没有差异。1.候选发布测试候选版本和Beta版测试不同。与Beta测试版本相比，候选版本的问题非常少。如果发现缺陷，则进行一轮测试以确保存在进一步的问题。最后一次验证安装问题。针对候选发布者执行其他关键工作流测试"}, "md/release_note.html": {"url": "md/release_note.html", "title": "Release Notes", "keywords": "", "body": "发行说明发行说明是一个文档，作为最终版本的一部分发布，其中包含作为该版本的一部分进行的新增强功能以​​及该版本的已知问题。发行说明通常由技术作者编写，这些作者是与客户共享的通信文档。发行说明还提供了最终用户文档，用户指南和培训材料的过程。1.发行说明格式标题文档的名称，其中包含产品名称，版本号，发布日期，发行说明日期和版本。概述产品概述和最新软件版本的更改。目的发布说明的用途概述，其中列出了当前版本的新功能，增强功能和缺陷。问题摘要提供有关缺陷的说明。最终用户影响提供有关由于缺陷导致的最终用户影响的信息。联系支持联系信息。"}, "md/reliability_testing.html": {"url": "md/reliability_testing.html", "title": "Reliability Testing", "keywords": "", "body": "可靠性测试软件可靠性测试测试技术，该测试技术涉及测试软件在给定环境条件下的功能，这有助于发现软件设计和功能中的问题。1.可靠性测试涉及的参数无故障运行的可能性无故障运行的时间长度执行它的环境作为可靠性的一部分测量的关键参数如下：MTTF：平均失败时间MTTR：平均修复时间MTBF：平均故障间隔时间（=MTTF+MTTR）"}, "md/requirements.html": {"url": "md/requirements.html", "title": "Requirements", "keywords": "", "body": "要求这些要求是关于特定系统服务，约束或在需求收集过程中生成的详细规范的高级描述。1.要求类型用户要求它是自然语言的详细描述，以及系统提供的服务图及其操作约束。它通常由最终用户开发。系统要求这是一份结构化文件，详细说明了系统的功能，服务和操作限制。功能要求它描述了系统的服务，系统应如何对特定输入作出反应以及系统在特定情况下的行为方式。非功能性要求它描述了系统的属性。域要求源自应用程序域并反映该域特征的要求。它可以是功能性或非功能性规格。2.要求文件结构前言介绍用户需求定义系统架构系统要求规范系统模型附录"}, "md/requirements_based_testing.html": {"url": "md/requirements_based_testing.html", "title": "Requirement Based Testing", "keywords": "", "body": "基于需求的测试基于需求的测试是一种测试方法，其中测试用例，条件和数据来自需求。它包括功能测试以及非功能属性，如性能，可靠性或可用性。1.基于需求的测试阶段定义测试完成标准仅在所有功能和非功能测试完成后才完成测试。设计测试用例测试用例有五个参数，即初始状态或前置条件，数据设置，输入，预期结果和实际结果。执行测试针对被测系统执行测试用例并记录结果。验证测试结果验证预期结果和实际结果是否相互匹配。验证测试覆盖率验证测试是否涵盖需求的功能和非功能方面。跟踪和管理缺陷在测试过程中检测到的任何缺陷都会经历缺陷生命周期并跟踪到解决方案。维护缺陷统计数据，这将为我们提供项目的总体状态。2.要求测试过程测试必须及时进行。测试过程应该为软件生命周期增加价值，因此它需要有效。彻底测试系统是不可能的，因此测试过程也需要高效。测试必须提供项目的整体状态，因此它应该是可管理的。"}, "md/requirements_traceability_matrix.html": {"url": "md/requirements_traceability_matrix.html", "title": "Requirements Traceability Matrix", "keywords": "", "body": "需求可追溯性矩阵需求跟踪，记录需求与为实现和验证这些需求而开发的工作产品之间的链接的过程。RTM在生命周期结束时提供的单个文档中捕获所有需求及其可跟踪性。1.RTM-WorkFlowMatrix是在项目的最初阶段创建的，因为它构成了项目范围和可交付成果的基础。Matrix是双向的，因为它通过检查可交付成果的输出来跟踪需求，并通过查看为产品的特定功能指定的业务需求来向后追踪需求。2.需求可追溯性矩阵-参数要求ID风险要求类型要求说明追溯设计规范单元测试用例集成测试用例系统测试用例用户验收测试用例跟踪测试脚本"}, "md/result.html": {"url": "md/result.html", "title": "Result", "keywords": "", "body": "结果结果报告是一种机制，用于从各个角度向客户呈现产品的状态。报告格式随时变化，如下所述：SDLC中的测试阶段。有针对性的受众。采用的测试技术-白盒或黑盒测试。测试类型包括功能，性能/负载/压力，灾难恢复等。1.结果报告重要性结果报告对于了解产品/项目的状态以及确保采取纠正措施非常重要。当产品测试失败时，结果报告非常重要。结果应该捕获性能，平台依赖性等，而不仅仅是功能问题。对产品状态提供公正的意见是客户所期望的。报告不仅应强调优势，还应涵盖限制和建议（如果有）。报告将帮助客户对产品发布时间表做出关键决策。"}, "md/retesting.html": {"url": "md/retesting.html", "title": "Re-testing", "keywords": "", "body": "重新测试重新测试是针对新软件执行先前失败的测试，以检查问题是否已解决。修复缺陷后，将执行重新测试以在相同的环境条件下检查方案。在重新测试期间，测试人员会在更改的功能区域中查找详细信息，而回归测试则涵盖所有主要功能，以确保不会因此更改而导致功能被破坏。"}, "md/review.html": {"url": "md/review.html", "title": "Review", "keywords": "", "body": "审核审核是由一个或多个人对文档进行系统检查，主要目的是在软件开发生命周期的早期发现并消除错误。评论用于验证文档，例如需求，系统设计，代码，测试计划和测试用例。通常手动执行评审，同时使用工具执行工具的静态分析。1.审核流程的重要性Dev团队的生产力得到改善，时间尺度缩短，因为早期阶段和工作产品中缺陷的纠正将有助于确保这些工作产品清晰明确。由于在初始阶段有足够的时间，测试成本和时间会减少。降低成本，因为最终软件中的缺陷更少。2.审核过程中的缺陷类型与监管或贸易组织内部定义或定义的标准的偏差。要求缺陷。设计缺陷。接口规格不正确。3.审查阶段-工作流程"}, "md/risk.html": {"url": "md/risk.html", "title": "Risk", "keywords": "", "body": "风险风险可以定义为事件，危险，事故，威胁或情况发生的概率及其不良后果。这是一个可能导致负面后果的因素，通常表示为影响和可能性的产物。1.风险类型在软件术语中，风险大致分为两大类：2.项目风险供应商问题组织因素技术问题3.产品风险以下是LIVE环境中发生的一些产品风险：提供缺陷Prone软件产品中可能对个人（伤害或死亡）或公司造成伤害的严重缺陷软件功能差软件功能不一致"}, "md/risk_management.html": {"url": "md/risk_management.html", "title": "Risk Management", "keywords": "", "body": "风险管理风险管理是识别，评估和确定风险优先级的过程，以最小化，监控和控制不幸事件的可能性。1.风险管理流程使用以下工作流程可以轻松理解风险管理流程：2.风险管理实践软件风险评估（SRE）持续风险管理（CRM）团队风险管理（TRM）"}, "md/root_cause.html": {"url": "md/root_cause.html", "title": "Root Cause", "keywords": "", "body": "根本原因根本原因是确定与不良事件或近距离呼叫相关的基本性能变化的影响因素的过程。1.原因身体原因系统原因2.根本原因分析（RCA）的意义防止再次出现问题减少最终用户可能受伤/死亡减少返工和报废促进快乐的客户和股东降低成本，节省资金3.RCA的有用工具帕累托分析头脑风暴流程图或流程映射因果图标杆"}, "md/safety_testing.html": {"url": "md/safety_testing.html", "title": "Safety Testing", "keywords": "", "body": "安全测试软件系统中的安全测试旨在优化软件系统的设计，开发，使用和维护中的系统安全性，以及它们与生产环境中的安全关键硬件系统的集成。1.软件安全方面功能性软件不应产生危险-例如：指导最先进的飞机不应引入海洋监控系统必须完美运行-例如：备用计算机应在主要故障时自动启动2.安全测试目标在涉及许多交互的复杂系统中，应识别并彻底分析安全关键功能。确定并消除与系统相关的贡献因素和由此产生的危害。安全关键接口的数量保持较低，以避免伤害或死亡。安全属性将作为所有软件测试级别的一部分来解决。"}, "md/sanity_testing.html": {"url": "md/sanity_testing.html", "title": "Sanity Testing", "keywords": "", "body": "完整性测试完整性测试，由测试团队执行的一些软件测试技术，用于一些基本测试。每当收到新版本进行测试时，都要进行基本测试。诸如冒烟测试或构建验证测试或基本验收测试或完整性测试之类的术语可互换使用，但是，它们中的每一个都在略微不同的情况下使用。完整性测试通常是无脚本的，有助于识别依赖的缺失功能。它用于确定应用程序的部分是否在稍作更改后仍然有效。完整性测试可以狭窄而深入。完整性测试是一种狭隘的回归测试，侧重于一个或几个功能区域。"}, "md/scalability_testing.html": {"url": "md/scalability_testing.html", "title": "Scalability Testing", "keywords": "", "body": "可伸缩性测试可伸缩性，一种性能测试参数，通过增加每个用户的工作负载，或并发用户数或数据库大小来调查系统的增长能力。1.可伸缩性测试属性响应时间吞吐量每秒点击次数，每秒请求数，每秒事务数具有用户数量的性能测量在巨大负载下的性能测量CPU使用率，正在测试的内存使用情况网络使用-发送和接收的数据Web服务器-每秒请求和响应"}, "md/scenario_testing.html": {"url": "md/scenario_testing.html", "title": "Scenario Testing", "keywords": "", "body": "场景测试场景测试是一种充分利用场景的软件测试技术。场景有助于复杂的系统更好地测试场景中哪些内容易于评估。1.场景测试中的方法系统场景用例和基于角色的方案2.创建好方案的策略列举可能的用户他们的行为和目标使用黑客的心态评估用户并列出可能的系统滥用情况。列出系统事件以及系统如何处理此类请求。列出好处并创建端到端任务来检查它们。阅读有关类似系统及其行为的信息。研究有关竞争对手产品及其前身的投诉。3.场景测试风险当产品不稳定时，情景测试变得复杂。场景测试不是为测试覆盖而设计的。场景测试经常被大量记录并且一次又一次地使用"}, "md/schedule.html": {"url": "md/schedule.html", "title": "Schedule", "keywords": "", "body": "时间表软件计划与项目规模，工作量和成本直接相关。调度的完成有三个主要原因，如下所示：致力于项目的及时性。估计项目执行所需的资源。估算项目成本以分配资金并获得批准。1.软件时间表-功能调度基于类似项目的经验。完成软件调度以确保实现关键的里程碑日期，依赖日期。为调度做出的假设已有详细记录。调度通常与利益相关者共享，在启动实际开发过程之前达成一致并签字。"}, "md/script.html": {"url": "md/script.html", "title": "Script", "keywords": "", "body": "脚本脚本是某个程序或脚本引擎的一组指令或命令，用于在执行系统时自动执行该过程。ActiveServerPages（ASP），JavaServerPages（JSP）和PHP脚本通常用于生成动态Web内容。"}, "md/security_testing.html": {"url": "md/security_testing.html", "title": "Security Testing", "keywords": "", "body": "安全测试安全测试是一种测试技术，用于确定信息系统是否保护数据并按预期维护功能。它还旨在验证以下列出的6项基本原则：保密廉正认证授权可用性不可否认1.安全测试-技术注射身份验证和会话管理中断跨站点脚本（XSS）不安全的直接对象引用安全配置错误敏感数据暴露缺少功能级访问控制跨站请求伪造（CSRF）使用具有已知漏洞的组件未经验证的重定向和转发"}, "md/simulation.html": {"url": "md/simulation.html", "title": "Simulation", "keywords": "", "body": "模拟模拟是模拟真实或建议系统的操作的计算机模型，它是基于时间的并且考虑了所涉及的所有资源和约束。1.受Simulation影响的参数成本重复性时间"}, "md/smoke_testing.html": {"url": "md/smoke_testing.html", "title": "Smoke Testing", "keywords": "", "body": "冒烟测试冒烟测试是一种受硬件测试启发的测试技术，硬件测试在硬件电源打开后检查硬件组件的冒烟。类似地，在软件测试环境中，冒烟测试是指测试构建的基本功能。如果测试失败，则构建被声明为不稳定，并且在构建的冒烟测试通过之前不再进行测试。1.冒烟测试-特点确定产品必须满足的业务关键功能。设计和执行应用程序的基本功能。确保冒烟测试通过每个构建以进行测试。SmokeTests可以发现明显的错误，从而节省测试团队的时间和精力。冒烟测试可以手动或自动进行。"}, "md/soak_testing.html": {"url": "md/soak_testing.html", "title": "Soak Testing", "keywords": "", "body": "浸泡测试进行浸泡测试也称为耐久性测试，以确定被测应用是否能够承受连续负载。浸泡测试，非功能测试涉及检查系统是否可以承受较长时间的巨大负载，并通过测量系统的反应参数。1.发现的问题-浸泡测试严重的内存泄漏最终会导致应用程序或操作系统崩溃如果未能关闭系统各层之间的连接，可能会使系统的某些或所有模块停顿。在某些情况下无法关闭数据库连接可能会导致整个系统崩溃。随着应用程序因长时间测试而变得效率降低，系统响应时间逐渐降低。"}, "md/software_requirement_specification.html": {"url": "md/software_requirement_specification.html", "title": "Software Requirement Specification", "keywords": "", "body": "软件需求规范软件需求规范（SRS）是一个文档，它捕获有关系统预期执行情况的完整描述。它通常在需求工程阶段结束时签署。1.SRS的质量正确明确的完成一贯按重要性和/或稳定性排名可验证可修改可溯源2.要求类型下图描绘了SRS期间捕获的各种类型的需求。"}, "md/state_transition.html": {"url": "md/state_transition.html", "title": "State Transition Testing", "keywords": "", "body": "状态转换测试状态转换测试，一种黑盒测试技术，其中输出由输入条件的变化或系统“状态”的变化触发。换句话说，测试旨在执行有效和无效的状态转换。1.什么时候用当我们发生事件序列以及适用于这些事件的相关条件时对特定事件的正确处理取决于过去发生的事件和条件它用于涉及各种状态和转换的实时系统2.导出测试用例了解各种状态和转换，并标记每个有效和无效的状态定义导致允许的测试结束状态的事件序列应记下每个访问状态和遍历过渡的情况应重复步骤2和3，直到访问了所有状态并遍历所有转换为了使测试用例具有良好的覆盖率，必须生成实际输入值和实际输出值3.好处允许测试人员熟悉软件设计，使他们能够有效地设计测试。它还使测试人员能够覆盖未计划或无效的状态。"}, "md/static_testing.html": {"url": "md/static_testing.html", "title": "Static Testing", "keywords": "", "body": "静态测试静态测试，一种软件测试技术，在该技术中测试软件而不执行代码。它有两部分，如下所示：审核-通常用于查找和消除文档中的错误或含糊之处，例如需求，设计，测试用例等。静态分析-开发人员编写的代码（通常通过工具）分析可能导致缺陷的结构缺陷。1.类型评论的类型可以通过一个简单的图表给出：2.静态分析-按工具以下是静态分析期间工具发现的缺陷类型：具有未定义值的变量模块和组件之间的接口不一致声明但从未使用过的变量无法访问的代码（或）死代码编程标准违规安全漏洞语法违规"}, "md/statistical_testing.html": {"url": "md/statistical_testing.html", "title": "Statistical Testing", "keywords": "", "body": "统计测试统计测试利用统计方法确定程序的可靠性。统计测试侧重于故障程序如何影响其运行条件。1.如何进行ST软件使用统计模拟工作环境的测试数据进行测试。对故障进行整理和分析。根据计算的数据，计算程序失败率的估计值。通过构建代数函数来计算用于测试可能路径的统计方法。统计测试是一种无启动活动，因为其目的不是找到缺陷。"}, "md/storage_testing.html": {"url": "md/storage_testing.html", "title": "Storage Testing", "keywords": "", "body": "存储测试存储测试是一种测试技术，用于验证测试中的应用程序，将相关数据存储在适当的目录中，并且它有足够的空间来防止由于磁盘空间不足而意外终止。存储测试用于确定应用程序是否使用的内存大于估计的内存，因为填充磁盘空间会导致严重的停机时间。测试团队应将这些视为测试或存储目标的一部分。"}, "md/stress_testing.html": {"url": "md/stress_testing.html", "title": "Stress Testing", "keywords": "", "body": "压力测试压力测试作为性能测试的一部分执行的非功能性测试技术。在压力测试期间，系统在系统过载后进行监控，以确保系统能够承受压力。从这样的阶段（压力之后）恢复系统非常关键，因为它很可能在生产环境中发生。1.进行压力测试的原因它允许测试团队在故障期间监控系统性能。验证系统是否在崩溃之前保存了数据。验证系统在崩溃时是否打印出意义错误消息，或者是否打印了一些随机异常。验证意外故障是否不会导致安全问题。2.压力测试-场景在同时登录的最大用户数时监控系统行为。所有用户同时执行关键操作。所有用户同时访问同一文件。数据库服务器关闭或服务器园中的某些服务器等硬件问题崩溃。"}, "md/structural_testing.html": {"url": "md/structural_testing.html", "title": "Structural Testing", "keywords": "", "body": "结构测试结构测试，也称为玻璃盒测试或白盒测试，是一种方法，其中测试来自对软件结构或内部实现的了解。结构测试的其他名称包括透明盒测试，开箱测试，逻辑驱动测试或路径驱动测试。1.结构测试技术声明覆盖-此技术旨在使用最少的测试来执行所有编程语句。分支覆盖-此技术正在运行一系列测试，以确保所有分支至少测试一次。路径覆盖-此技术对应于测试所有可能的路径，这意味着涵盖了每个语句和分支。2.结构测试的优点强制测试开发人员仔细推理实施显示“隐藏”代码中的错误针对最佳编程实践制定死代码或其他问题。3.结构箱测试的缺点昂贵，因为必须花费时间和金钱来执行白盒测试。偶然错过几行代码的每种可能性。深入了解编程语言是进行白盒测试的必要条件。"}, "md/structured_walkthrough.html": {"url": "md/structured_walkthrough.html", "title": "Structural Walkthrough", "keywords": "", "body": "结构化演练结构化演练，静态测试技术，在一组同行之间以有组织的方式执行，以审查和讨论软件开发过程的技术方面。结构化演练的主要目标是发现缺陷，以提高产品质量。结构化演练通常不用于技术讨论或讨论所发现问题的解决方案。如上所述，目的是检测错误而不是纠正错误。演练结束后，输出的作者负责解决问题。1.优点在发现缺陷时节省时间和金钱，并在生命周期的早期得到纠正。这提供了具有不同技术背景和经验的审阅者的增值评论。它通知项目管理团队开发过程的进度。它可以提高对不同开发或维护方法的认识，从而为参与者提供专业的发展。2.结构化演练参与者作者正在审查的文件的作者。演示者演示者通常会制定演练的议程并显示正在审阅的输出。主持人主持人促进了漫游会话，确保遵循演练议程，并鼓励所有审阅者参与。审阅者审阅者评估待测文档以确定其技术准确性。Scribe抄写员是结构化演练结果的记录员，他们记录所识别的问题以及任何其他技术评论，建议和未解决的问题。"}, "md/stub.html": {"url": "md/stub.html", "title": "Stub", "keywords": "", "body": "存根在自上而下的集成测试期间使用存根，以模拟尚未集成的较低级别模块的行为。存根是模块，它们作为被调用模块的临时替代，并提供与实际产品相同的输出。当软件需要与外部系统交互时，也会使用存根。1.存根-流程图上图清楚地表明模块1,2和3可用于集成，而下面的模块仍处于开发阶段，此时无法集成。因此，Stubs用于测试模块。整合的顺序将是：1,21,32,Stub12,Stub23,Stub33,Stub42.测试方法首先，模块1、2、3之间的集成测试模块2和存根1、存根2之间的集成测试模块3与存根3、存根4的集成"}, "md/symbolic_execution.html": {"url": "md/symbolic_execution.html", "title": "Symbolic Execution", "keywords": "", "body": "符号执行符号执行是一种软件测试技术，可用于帮助生成测试数据和证明程序质量。1.使用符号执行的步骤执行需要选择由一组数据值执行的路径。使用实际数据执行的程序导致输出一系列值。在符号执行中，数据由具有表达式集的符号值替换，每个输出变量一个表达式。符号执行的常用方法是执行程序分析，从而创建流程图。流程图识别决策点和与每个流相关的分配。通过从入口点遍历流图，生成赋值语句和分支谓词的列表。2.符号执行问题如果已知循环中的迭代次数，则无法进行符号执行。第二个问题是调用任何外部代码或模块调用。符号执行不能与数组一起使用。符号执行无法识别不可行的路径。3.符号执行应用程序路径域检查测试数据生成分区分析符号调试"}, "md/syntax_testing.html": {"url": "md/syntax_testing.html", "title": "Syntax Testing", "keywords": "", "body": "语法测试语法测试是一种黑盒测试技术，涉及测试系统输入，它通常是自动化的，因为语法测试会产生大量测试。内部和外部输入必须符合以下格式：来自用户的输入数据的格式。文件格式。数据库模式。1.语法测试-步骤确定目标语言或格式。定义语言的语法。验证和调试语法。2.语法测试-限制有时很容易忘记正常情况。语法测试需要构建驱动程序，该程序自动排序通常存储为数据的一组测试用例。"}, "md/system_Integration_testing.html": {"url": "md/system_Integration_testing.html", "title": "Syntax Integration Testing", "keywords": "", "body": "系统集成测试系统集成测试（SIT）是一种黑盒测试技术，可根据指定的要求评估系统的合规性。系统集成测试通常在系统子集上执行，而系统测试在完整系统上执行，并且在用户验收测试（UAT）之前。可以在最少使用测试工具的情况下执行SIT，验证交换的交互并且调查单个层内的每个数据字段的行为。集成后，数据流有三种主要状态：1.系统集成测试集成层中的数据状态数据库层中的数据状态Application层中的数据状态2.系统集成测试中的粒度系统内测试系统间测试成对测试3.系统集成测试技术自上而下的集成测试自下而上的集成测试三明治整x合测试大爆炸一体化测试"}, "md/system_testing.html": {"url": "md/system_testing.html", "title": "System Testing", "keywords": "", "body": "系统测试系统测试（ST）是一种黑盒测试技术，用于评估整个系统系统是否符合指定要求。在系统测试中，系统的功能从端到端的角度进行测试。系统测试通常由独立于开发团队的团队执行，以便无偏差地测量系统的质量。它包括功能和非功能测试。1.系统测试类型"}, "md/system_under_test.html": {"url": "md/system_under_test.html", "title": "System Under Test", "keywords": "", "body": "被测系统被测系统（SUT）是指由测试人员验证的系统。术语也称为测试中的应用程序。被测系统（SUT）也对应于成熟并经过单元和集成测试的软件。"}, "md/technical_review.html": {"url": "md/technical_review.html", "title": "Technical Review", "keywords": "", "body": "技术评论技术评论是一种静态白盒测试技术，用于在生命周期的早期发现缺陷，这是黑盒测试技术无法检测到的。1.技术评论-静态测试2.技术评论特点技术评审已记录在案，并使用缺陷检测流程，该流程由同行和技术专家组成，作为审核流程的一部分。审核流程不涉及管理层参与。它通常由训练有素的主持人领导，而主持人不是作者。编写报告时列出了需要解决的问题清单。"}, "md/test_approach.html": {"url": "md/test_approach.html", "title": "Test Approach", "keywords": "", "body": "测试方法测试方法是项目的测试策略实现，定义了如何执行测试。测试方法有两种技术：主动一种方法，在该方法中尽早启动测试设计过程，以便在创建构建之前查找和修复缺陷。Reactive一种在设计和编码完成之后才开始测试的方法。1.不同的测试方法项目可以根据具体情况采用许多策略，其中一些是：动态和启发式方法协商方法基于模型的方法，使用有关故障率的统计信息。基于风险测试的方法，其中整个开发基于风险进行有条不紊的方法，基于失败。符合行业标准的标准合规方法。2.需要考虑的因素产品风险或失败风险或环境和公司风险。在提出的工具和技术方面的人的专业知识和经验。监管和法律方面，例如开发过程的外部和内部法规。产品和领域的性质。"}, "md/test_automation.html": {"url": "md/test_automation.html", "title": "Test Automation", "keywords": "", "body": "测试自动化软件测试自动化使用专用工具来控制测试的执行，并将实际结果与预期结果进行比较。通常，回归测试（重复操作）是自动化的。测试工具不仅帮助我们执行回归测试，还帮助我们自动化数据设置生成，产品安装，GUI交互，缺陷记录等。自动化工具用于功能测试和非功能测试。1.工具选择标准要自动化任何应用程序，应考虑以下参数：数据驱动功能调试和日志记录功能平台独立性可扩展性和可定制性邮件通知版本控制友好支持无人值守的测试运行2.框架类型通常，在自动化应用程序时采用4个测试自动化框架：数据驱动的自动化框架关键字驱动自动化框架模块化自动化框架混合自动化框架"}, "md/test_basis.html": {"url": "md/test_basis.html", "title": "Test Basis", "keywords": "", "body": "测试基础测试基础被定义为编写测试用例和测试分析所需的信息源或文档。测试基础应明确定义并且结构合理，以便可以轻松识别可以从中导出测试用例的测试条件。1.典型测试依据要求文件测试计划代码库业务需求"}, "md/test_bed.html": {"url": "md/test_bed.html", "title": "Test Bed", "keywords": "", "body": "试验台配置用于测试的测试执行环境。试验台由特定的硬件，软件，操作系统，网络配置，被测产品，其他系统软件和应用软件组成。1.试验台配置它是执行测试的硬件和软件环境的组合。它包括硬件配置，操作系统设置，软件配置，测试终端和其他支持以执行测试。"}, "md/test_case.html": {"url": "md/test_case.html", "title": "Test Case", "keywords": "", "body": "测试用例测试用例是一个文档，它具有一组测试数据，前置条件，预期结果和后置条件，为特定测试场景开发，以验证是否符合特定要求。测试用例充当测试执行的起点，在应用一组输入值之后，应用程序具有明确的结果，并使系统处于某个端点或称为执行后置条件。1.典型测试用例参数测试用例ID测试场景测试用例说明测试步骤条件测试数据预期结果测试参数实际结果环境信息评论"}, "md/test_case_design_technique.html": {"url": "md/test_case_design_technique.html", "title": "Test Case Design Technique", "keywords": "", "body": "测试用例设计技术以下是软件工程中的典型设计技术：直接从需求规范或黑盒测试设计技术中获取测试用例。技术包括：边界值分析（BVA）等价划分（EP）决策表测试国家过渡图用例测试直接从组件或系统的结构派生测试用例：声明范围分支机构路径覆盖范围LCSAJ测试根据测试人员在类似系统或测试人员直觉上的经验得出测试用例：错误猜测探索性测试"}, "md/test_suite.html": {"url": "md/test_suite.html", "title": "Test Suite", "keywords": "", "body": "测试套件测试套件是一个容器，具有一组测试，可帮助测试人员执行和报告测试执行状态。它可以采取三种状态中的任何一种，即Active，Inprogress和completed。可以将测试用例添加到多个测试套件和测试计划中。创建测试计划后，将创建测试套件，而测试套件又可以进行任意数量的测试。测试套件基于周期或基于范围创建。它可以包含任何类型的测试，即功能测试或非功能测试。"}, "md/test_completion_criterion.html": {"url": "md/test_completion_criterion.html", "title": "Test Completion Criterion", "keywords": "", "body": "测试完成标准在我们声称测试完成之前，检查测试退出标准是非常必要的。在结束测试过程之前，根据测试完成标准测量产品质量。退出标准与测试覆盖率相关，采用的测试用例设计技术，产品的风险等级从一个测试级别到另一个测试级别不等。1.测试完成标准-示例已实现指定的覆盖范围。没有Showstoppers或关键缺陷。很少有已知的中等或低优先级缺陷不会影响产品的使用。2.测试完成标准-意义如果未满足退出标准，则无法停止测试。必须根据产品质量对出口标准进行修改或延长时间进行测试。必须记录测试完成标准的任何更改并由利益相关者签字。成功完成退出标准后，可以发布测试件。"}, "md/test_completion_report.html": {"url": "md/test_completion_report.html", "title": "Test Completion Report", "keywords": "", "body": "测试完成报告测试完成报告是一个过程，通过测试指标以汇总格式报告，以更新利益相关者，使他们能够做出明智的决定。1.测试完成报告格式测试摘要报告标识符摘要方差摘要结果评估计划与实际工作量登出2.测试完成报告的意义质量的指示衡量未决风险对测试软件的信心程度"}, "md/test_completion_matrix.html": {"url": "md/test_completion_matrix.html", "title": "Test Completion Matrix", "keywords": "", "body": "测试完成矩阵完成测试后，收集各种矩阵以准备测试报告。以下是准备报告的一些标准：执行的测试次数通过的测试数量测试次数失败基于每个模块的测试失败次数在执行周期中引发的测试缺陷数量接受的测试缺陷数量被拒绝的测试缺陷数量延期的测试缺陷数量活动缺陷的状态计算构建的质量指标"}, "md/test_data.html": {"url": "md/test_data.html", "title": "Test Data", "keywords": "", "body": "测试数据测试数据是用于在测试件上执行测试的数据。测试数据需要精确且详尽无遗，以发现缺陷。1.测试数据生成技术随机测试数据生成器面向目标的测试数据生成器路径测试数据生成器智能测试数据生成器"}, "md/test_data_management.html": {"url": "md/test_data_management.html", "title": "Test Data Management", "keywords": "", "body": "测试数据管理测试数据管理在测试生命周期中非常关键。生成的数据量对于测试应用程序来说是巨大的。报告结果可以最大限度地减少处理数据和创建报告所花费的时间，从而极大地提高了整个产品的效率。1.测试数据管理-清单识别常见的测试数据元素测试数据的老化，屏蔽和存档确定测试数据的优先级和分配生成指标的报告和仪表板创建和实施业务规则构建用于主数据准备的自动化套件屏蔽，存档和版本化数据老化"}, "md/test_driven_development.html": {"url": "md/test_driven_development.html", "title": "Test Driven Development", "keywords": "", "body": "测试驱动开发测试驱动开发始于为每个功能开发测试。测试可能会失败，因为甚至在开发之前就开发了测试。然后开发团队开发并重构代码以通过测试。测试驱动开发与作为极端编程概念的一部分而演变的测试优先编程相关。1.测试驱动的开发过程添加测试运行所有测试并查看新测试是否失败写一些代码运行测试和重构代码重复2.测试背景有效输入输入无效错误，异常和事件边界条件一切都可能破裂3.TDD的好处调试时间少得多经证明符合要求的代码测试成为安全网接近零缺陷更短的开发周期"}, "md/test_driver.html": {"url": "md/test_driver.html", "title": "Test Driver", "keywords": "", "body": "测试驱动在自底向上集成测试期间使用测试驱动程序，以模拟尚未集成的上层模块的行为。测试驱动程序是作为调用模块的临时替代品并提供与实际产品相同的输出的模块。当软件需要与外部系统交互并且通常比存根复杂时，也使用驱动程序。"}, "md/test_environment.html": {"url": "md/test_environment.html", "title": "Test Environment", "keywords": "", "body": "测试环境测试环境由支持测试执行的元素组成，包括软件，硬件和网络。测试环境配置必须模仿生产环境，以便发现任何与环境/配置相关的问题。1.设计测试环境的因素确定测试环境是否需要归档以便恢复。验证网络配置。确定所需的服务器操作系统，数据库和其他组件。确定测试团队所需的许可证数量。2.环境配置它是执行测试的硬件和软件环境的组合。它包括硬件配置，操作系统设置，软件配置，测试终端和其他支持以执行测试。"}, "md/test_execution.html": {"url": "md/test_execution.html", "title": "Test Execution", "keywords": "", "body": "测试执行测试执行是执行代码并比较预期结果和实际结果的过程。测试执行过程需要考虑以下因素：根据风险，选择要为此周期执行的测试套件的子集。将每个测试套件中的测试用例分配给测试人员执行。执行测试，报告错误并持续捕获测试状态。解决阻塞问题。报告状态，调整任务，并每天重新考虑计划和优先事项。报告测试周期的发现和状态。"}, "md/test_management.html": {"url": "md/test_management.html", "title": "Test Management", "keywords": "", "body": "测试管理测试管理，管理测试的过程。还使用工具来执行测试管理，以管理先前由测试过程指定的两种类型的测试，自动和手动。测试管理工具允许自动生成需求测试矩阵（RTM），这表示被测应用程序（SUT）的功能覆盖。测试管理工具通常具有多功能功能，例如测试软件管理，测试调度，结果记录，测试跟踪，事件管理和测试报告。1.测试管理职责测试管理在提高产品质量方面有明确的角色和职责。测试管理有助于在项目过程中开发和维护产品指标。测试管理使开发人员能够确保设计或编码错误更少。"}, "md/test_plan.html": {"url": "md/test_plan.html", "title": "Test Plan", "keywords": "", "body": "测试计划测试计划，这是确保最初在基准计划中有任务列表和里程碑以跟踪项目进度的最重要的活动。它还定义了测试工作的大小。它通常被称为主测试计划或项目测试计划，通常在项目的早期阶段开发。1.测试计划活动确定需要测试的范围和风险，以及不进行测试的风险。记录测试策略。确保已包含测试活动。决定进入和退出标准。评估测试估计。规划何时以及如何测试和决定如何评估测试结果，以及定义测试退出标准。作为测试执行的一部分提供的测试文物。定义管理信息，包括所需的指标和缺陷解决方案以及风险问题。确保测试文档生成可重复的测试资产。"}, "md/test_steps.html": {"url": "md/test_steps.html", "title": "Test Steps", "keywords": "", "body": "测试步骤测试步骤描述了针对每个步骤记录的执行步骤和预期结果。根据预期结果和实际结果之间的比较结果，每个步骤都标记为通过或失败。在开发测试用例时，我们通常会有以下字段：测试场景测试步骤参数预期结果实际结果如果预期结果与实际结果不匹配，那么我们记录缺陷。缺陷经历了缺陷生命周期，测试人员在修复后解决了相同问题。"}, "md/test_strategy.html": {"url": "md/test_strategy.html", "title": "Test Strategy", "keywords": "", "body": "测试策略测试策略也称为测试方法，定义了如何进行测试。测试方法有两种技术：主动-一种方法，在该方法中尽早启动测试设计过程，以便在创建构建之前查找和修复缺陷。Reactive-一种在设计和编码完成之后才开始测试的方法。1.不同的测试方法项目可以根据具体情况采用许多策略，其中一些是：动态和启发式方法协商方法基于模型的方法，使用有关故障率的统计信息。基于风险测试的方法，其中整个开发基于风险进行基于失败的方法方法。符合行业标准的标准合规方法。2.需要考虑的因素产品风险或失败风险或环境和公司风险在提出的工具和技术方面的人的专业知识和经验。监管和法律方面，例如开发过程的外部和内部法规产品和领域的性质"}, "md/thread_testing.html": {"url": "md/thread_testing.html", "title": "Thread Testing", "keywords": "", "body": "线程测试线程是系统可以执行的最小工作单元。线程测试，一种在早期集成测试阶段使用的软件测试技术，用于验证执行特定任务的关键功能。如果应用程序是使用客户端服务器体系结构的类型，则这些技术非常有用。通过集成的客户端，服务器和网络对有效的业务事务执行线程测试非常关键。线程作为子系统逐步集成和测试，然后作为整个系统执行。"}, "md/top_down_integration_testing.html": {"url": "md/top_down_integration_testing.html", "title": "Top Down Integration Testing", "keywords": "", "body": "自上而下的集成测试自上而下的集成测试是一种集成测试技术，用于模拟尚未集成的低级模块的行为。存根是模块，它们作为被调用模块的临时替代，并提供与实际产品相同的输出。“被调用”模块的替换被称为“存根”，当软件需要与外部系统交互时也可以使用它。"}, "md/total_quality_management.html": {"url": "md/total_quality_management.html", "title": "Total Quality Management", "keywords": "", "body": "全面质量管理TQM可以定义为用于改进流程，产品，服务以及与产品相关的其他方法的管理技术。它专注于整个业务，而不仅仅是针对特定项目或流程。1.TQM的要素根本原因分析以客户为中心积极的员工参与面向过程内部和外部自我评估连续的提高做出明智的决策有效的沟通2.质量控制工具原因-效果图清单直方图图表帕累托图树图箭头图3.流程改进周期"}, "md/traceability.html": {"url": "md/traceability.html", "title": "Traceability", "keywords": "", "body": "可追溯性需求工具或测试管理工具（如HPQualityCenter）中可跟踪性的重要性可实现需求和测试之间的链接。这会通知需求发生变化时需要更改的内容。需求管理工具还可以轻松计算需求覆盖率指标，因为可跟踪性可以将测试用例映射到需求。1.可追溯性的意义识别要使用的测试用例的apt版本。确定哪些测试用例可以重用或需要更新。协助调试过程，以便在执行测试时发现的缺陷可以追溯到相应的需求版本。"}, "md/unit_testing.html": {"url": "md/unit_testing.html", "title": "Unit Testing", "keywords": "", "body": "单元测试单元测试，一种测试技术，使用该测试技术测试各个模块以确定开发人员本身是否存在任何问题。它关注独立模块的功能正确性。主要目的是隔离系统的每个单元，以识别，分析和修复缺陷。1.单元测试-优点减少新开发功能中的缺陷或减少更改现有功能时的错误。在非常早期阶段捕获缺陷，从而降低测试成本。改进设计并允许更好地重构代码。单元测试与构建集成时也可以提供构建的质量。2.单元测试技术黑盒测试-用于测试用户界面，输入和输出。白盒测试-用于测试每个功能行为的测试。灰盒测试-用于执行测试，风险和评估方法。"}, "md/unreachable_code.html": {"url": "md/unreachable_code.html", "title": "Unreachable Code", "keywords": "", "body": "无法访问的代码无法访问的代码，源代码的一部分，由于不适当的退出点/控制流而永远不会被执行。另一种无法访问的代码称为死代码，尽管死代码可能会被执行但对系统的功能没有影响。1.无法访问的代码副作用不必要的内存开销。不必要的缓存周期会导致性能瓶颈。记录和维护管理费用。2.无法访问的代码原因在开发复杂条件分支时编程错误。不完整的单元测试，因为未检测到无法访问的代码。开发人员忘记删除的冗余代码由于传递给函数的输入数据，可能在编程上正确但不会在任何时间执行的代码。"}, "md/usability_testing.html": {"url": "md/usability_testing.html", "title": "Usability Testing", "keywords": "", "body": "可用性测试可用性测试，一种非功能性测试技术，用于衡量最终用户使用系统的难易程度。很难评估和测量，但可以根据以下参数进行评估：学习/使用软件所需的技能水平。它应该保持新手和专家用户的平衡。习惯使用软件所需的时间。衡量用户生产力增长的指标。评估用户对使用软件的态度。1.可用性测试过程"}, "md/use_case_testing.html": {"url": "md/use_case_testing.html", "title": "Use Case Testing", "keywords": "", "body": "用例测试用例测试是一种功能性黑盒测试技术，可帮助测试人员识别从头到尾在每个事务基础上运行整个系统的测试场景。1.用例测试的特征用例捕获'actor'和'system'之间的交互。“演员”代表每个用户参与的用户及其互动。基于用例的测试用例，称为场景。能够识别系统中的间隙，而这些间隙是通过单独测试单个组件而找不到的。在定义验收测试范围方面非常有效。"}, "md/use_acceptance_testing.html": {"url": "md/use_acceptance_testing.html", "title": "User Acceptance Testing", "keywords": "", "body": "用户验收测试用户验收测试，一种测试方法，其中客户/最终用户参与测试产品以根据他们的要求验证产品。它在开发人员站点的客户端位置执行。对于医药或航空工业等行业，合同和法规符合性测试以及操作验收测试也作为用户验收测试的一部分进行。UAT依赖于上下文，UAT计划是根据要求准备的，并非强制执行各种用户验收测试，甚至由测试团队协调和贡献。1.用户验收测试-在SDLC中下图说明了用户验收测试在软件开发生命周期中的适用性：验收测试用例是根据测试数据或使用验收测试脚本执行的，然后将结果与预期测试结果进行比较。2.验收标准验收标准是根据以下属性定义的：功能正确性和完整性数据的完整性数据转换可用性性能合时机密性和可用性可安装性和可升级性可扩展性文档3.验收测试计划-属性验收测试活动分阶段进行。首先执行基本测试，如果测试结果令人满意，则执行更复杂的场景。验收测试计划具有以下属性介绍验收测试类别运营环境测试用例ID测试题目测试目标测试程序测试时间表资源验收测试活动旨在得出以下结论之一：接受系统交付在请求的修改完成后接受系统不要接受系统4.验收测试报告-属性验收测试报告具有以下属性：报告标识符结果摘要变化建议待办事项清单摘要批准决定"}, "md/use_interface_testing.html": {"url": "md/use_interface_testing.html", "title": "User Interface Testing", "keywords": "", "body": "用户界面测试用户界面测试是一种用于识别缺陷存在的测试技术，是使用图形用户界面[GUI]测试的产品/软件。1.GUI测试-特点GUI是应用程序的分层图形前端，包含具有一组属性的图形对象。在执行期间，GUI的每个对象的属性值定义GUI状态。它具有执行按键/鼠标点击等GUI事件的功能。能够为GUI对象提供输入。检查GUI表示以查看它们是否与预期的表示一致。它在很大程度上取决于使用的技术。2.GUI测试-方法基于手动-基于测试人员的领域和应用知识。捕获和重放-基于捕获和重放用户操作。基于模型的测试-基于基于GUI模型的用户会话的执行。下面简要讨论各种GUI模型。3.基于模型的测试-简要说明基于事件的模型-基于GUI的所有事件需要至少执行一次。基于状态的模型-GUI的“所有状态”至少应运行一次。域模型-基于应用程序域及其功能。4.GUI测试清单检查屏幕验证验证所有导航检查可用性条件验证数据完整性验证对象状态验证日期字段和数字字段格式"}, "md/v_model.html": {"url": "md/v_model.html", "title": "V Model", "keywords": "", "body": "V模型V模型是一种软件开发生命周期方法，描述了要执行的活动以及在产品生命周期中必须产生的结果。它被称为验证和验证模型验证回答了这个问题-“我们是否正在开发从该软件中尝试用户所需的所有产品？”和Verification回答了这个问题-“我们是否通过坚定地遵循所有设计规范来开发此产品？”1.V模型目标项目风险最小化保证质量整个项目的总成本降低改善所有参与方之间的沟通2.V模型不同阶段需求阶段，描述收集和分析软件后软件需要执行的操作的文档，以及相应的测试活动是用户验收测试。架构设计阶段是系统测试，其中软件架构被设计并在软件内构建组件并建立组件与相应测试活动之间的关系。高级设计阶段，将系统分解为具有已识别接口的子系统；然后转换为更详细的设计，相应的测试活动是集成测试。详细设计阶段，其中指定了每个组件的详细实现。详细设计分为数据结构，使用的算法和相应的测试活动是单元测试。编码，其中软件的每个组件都经过编码和测试，以验证是否忠实地实现了详细设计。3.V模型的优点和局限性好处：强调在产品开发的早期阶段对产品进行验证和验证。每个阶段都是可测试的项目管理可以按里程碑跟踪进度易于理解的实施和使用限制：不容易同时处理事件。不处理迭代或阶段不容易处理需求的动态变化不包含风险分析或缓解活动"}, "md/validation_testing.html": {"url": "md/validation_testing.html", "title": "Validation Testing", "keywords": "", "body": "验证测试在开发过程中或在开发过程结束时评估软件以确定其是否满足指定业务要求的过程。验证测试确保产品真正满足客户的需求。它还可以定义为在适当的环境中部署时证明产品满足其预期用途。它回答了这个问题，我们正在构建正确的产品吗？1.验证测试-工作流程使用V-Model可以最好地证明验证测试。在此类测试期间评估所测试的软件/产品。2.活动内容单元测试集成测试系统测试用户验收测试"}, "md/verification_testing.html": {"url": "md/verification_testing.html", "title": "Verification Testing", "keywords": "", "body": "验证测试验证是评估开发阶段的工作产品以确定它们是否满足指定要求的过程。验证确保产品根据要求和设计规范制造。它还回答了这个问题，我们是否正确构建产品？1.验证测试-工作流程使用V-Model可以最好地证明验证测试。评估测试计划，需求规范，设计，代码和测试用例等人工制品。2.活动内容评测演练检查"}, "md/virtual_users.html": {"url": "md/virtual_users.html", "title": "Virtual Users", "keywords": "", "body": "虚拟用户从性能测试的角度来看，虚拟用户是一种常用术语。虚拟用户生成器使测试人员能够创建虚拟用户，以增加被测应用程序的用户负载。虚拟用户生成器捕获创建虚拟用户的请求，并且可以读取用户操作。"}, "md/volume_testing.html": {"url": "md/volume_testing.html", "title": "Volume Testing", "keywords": "", "body": "负载测试负载测试是一种非功能性测试，作为性能测试的一部分执行，其中软件受到大量数据的影响。它也被称为洪水测试。1.负载测试特性在开发阶段，只测试少量数据。随着时间的推移，随着时间的推移，软件的性能会随着时间的推移而恶化。测试用例来自设计文档。通常使用测试数据生成器生成测试数据。测试数据不需要逻辑正确，但数据是评估系统性能。完成测试后，将记录并跟踪结果以使其关闭。2.负载测试-清单验证是否有任何数据丢失。检查系统的响应时间。验证数据是否存储不正确。检查数据是否被覆盖而没有任何通知。"}, "md/vulnerability_testing.html": {"url": "md/vulnerability_testing.html", "title": "Vulnerability Testing", "keywords": "", "body": "漏洞测试漏洞测试，一种软件测试技术，用于评估系统中涉及的风险量，以降低事件发生的可能性。1.漏洞测试-清单验证密码的强度，因为它提供了一定程度的安全性。使用所采用的操作系统/技术验证访问控制。验证在线攻击者可以轻松接管系统。评估系统数据的安全级别。检查系统配置或应用程序配置文件是否受到保护。检查系统是否允许用户执行恶意脚本。2.漏洞测试-方法主动和被动测试网络和分布式测试验证文件/系统访问权限"}, "md/web_application_testing.html": {"url": "md/web_application_testing.html", "title": "Web Application Testing", "keywords": "", "body": "Web应用程序测试Web应用程序测试，一种独特的软件测试技术，用于测试Web上托管的应用程序，其中测试应用程序接口和其他功能。1.Web应用程序测试-技术功能测试以下是一些已执行的检查，但不限于以下列表：确认没有死页或无效的重定向。首先检查每个字段的所有验证。错误的输入执行负面测试。验证系统的工作流程。验证数据完整性。可用性测试验证应用程序如何易于使用。测试导航和控件。内容检查。检查用户直觉。接口测试执行以验证从一个系统到另一个系统的接口和数据流。兼容性测试兼容性测试基于应用程序的上下文执行。浏览器兼容性操作系统兼容性兼容笔记本，手机等各种设备性能测试执行以验证各种负载条件下的服务器响应时间和吞吐量。负载测试-这是最简单的测试形式，用于了解特定负载下系统的行为。负载测试将导致测量重要的业务关键事务，并且还监视数据库，应用程序服务器等的负载。压力测试-执行此操作以查找系统的上限容量，并确定当前负载远高于预期最大值时系统的执行情况。浸泡测试-浸泡测试也称为耐久性测试，用于确定连续预期负载下的系统参数。在浸泡测试期间，监视诸如内存利用率的参数以检测内存泄漏或其他性能问题。主要目的是发现系统在持续使用下的性能。尖峰测试-尖峰测试是通过非常大量地增加用户数量并测量系统性能来执行的。主要目的是确定系统是否能够承受工作量。安全测试执行以验证应用程序是否在Web上受到保护，因为数据被盗和未经授权的访问是更常见的问题，以下是验证系统安全级别的一些技术。注射身份验证和会话管理中断跨站点脚本（XSS）不安全的直接对象引用安全配置错误敏感数据暴露缺少功能级访问控制跨站请求伪造（CSRF）使用具有已知漏洞的组件未经验证的重定向和转发"}, "md/white_box_testing.html": {"url": "md/white_box_testing.html", "title": "White box Testing", "keywords": "", "body": "白盒测试白盒测试是一种测试技术，它检查程序结构并从程序逻辑/代码中导出测试数据。玻璃盒测试的其他名称是明确的盒子测试，开箱测试，逻辑驱动测试或路径驱动测试或结构测试。1.白盒测试技术声明覆盖-此技术旨在使用最少的测试来执行所有编程语句。分支覆盖-此技术正在运行一系列测试，以确保所有分支至少测试一次。路径覆盖-此技术对应于测试所有可能的路径，这意味着涵盖了每个语句和分支。2.白盒测试的优点强制测试开发人员仔细推理实施。显示“隐藏”代码中的错误。针对最佳编程实践制定死代码或其他问题。3.白盒测试的缺点昂贵，因为必须花费时间和金钱来执行白盒测试。偶然错过几行代码的每种可能性。有关编程语言的深入知识是执行白盒测试所必需的。"}, "md/workflow_testing.html": {"url": "md/workflow_testing.html", "title": "Workflow Testing", "keywords": "", "body": "工作流程测试工作流程通过在每条可能的路径中路由记录来处理软件测试中的技术。执行这些测试以确保每个工作流程过程准确地反映业务流程。这种测试适用于基于工作流的应用程序。1.工作流程测试-流程了解业务工作流程使用各种技术（用例，决策表等）开发测试用例。使用各种用户类型验证流（即管理员，更新用户，查看）。进行正面和负面测试。比较预期和实际结果以及日志缺陷。修复缺陷并进行部署。"}}